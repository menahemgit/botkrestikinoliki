import logging
import random
import string
import json
import asyncio
import time
from datetime import datetime, time as datetime_time
from pathlib import Path
from collections import defaultdict

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ConversationHandler, ContextTypes, ChatMemberHandler
from telegram.ext import filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)


# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
TOKEN = '7285079982:AAF7h-dP_WbeHQjOUYr-BvTtR02GJHkBmtQ'

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
active_games = {}
MENU, GAME_PLAY = range(2)
DATA_FILE = Path("game_data.json")
player_stats = defaultdict(lambda: {"wins": 0, "losses": 0, "draws": 0})

def get_main_keyboard():
    keyboard = [
        [KeyboardButton("–ù–æ–≤–∞—è –∏–≥—Ä–∞"), KeyboardButton("–ò–≥—Ä–∞ —Å –±–æ—Ç–æ–º")],
        [KeyboardButton("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ"), KeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton("–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤"), KeyboardButton("–ü—Ä–∞–≤–∏–ª–∞")],
        [KeyboardButton("–ü–æ–º–æ—â—å")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_main_keyboard():
    keyboard = [
        [KeyboardButton("–ù–æ–≤–∞—è –∏–≥—Ä–∞"), KeyboardButton("–ò–≥—Ä–∞ —Å –±–æ—Ç–æ–º")],
        [KeyboardButton("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ"), KeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton("–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤"), KeyboardButton("–ü—Ä–∞–≤–∏–ª–∞")],
        [KeyboardButton("–ü–æ–º–æ—â—å")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def handle_chat_member(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.my_chat_member.new_chat_member.status == "member":
        # –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –±–æ—Ç –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç –∏–ª–∏ –∏—Å—Ç–æ—Ä–∏—è –±—ã–ª–∞ –æ—á–∏—â–µ–Ω–∞
        user = update.effective_user
        welcome_message = (
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}!\n\n"
            "–Ø –±–æ—Ç –¥–ª—è –∏–≥—Ä—ã –≤ –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
            "‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∏–≥—Ä—ã\n"
            "‚Ä¢ –ò–≥—Ä–∞—Ç—å —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏\n"
            "‚Ä¢ –ò–≥—Ä–∞—Ç—å –ø—Ä–æ—Ç–∏–≤ –±–æ—Ç–∞\n"
            "‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤\n\n"
            "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥."
        )
        
        await context.bot.send_message(chat_id=update.effective_chat.id, 
                                       text=welcome_message, 
                                       reply_markup=get_main_keyboard())
    for i in range(0, 9, 3):
        row = []
        for j in range(3):
            cell = board[i + j]
            if cell == ' ':
                callback_data = f"move_{game_code}_{i+j}"
            else:
                callback_data = f"occupied_{game_code}_{i+j}"
            row.append(InlineKeyboardButton(cell if cell != ' ' else '.', callback_data=callback_data))
        keyboard.append(row)
    return InlineKeyboardMarkup(keyboard)

async def send_board(game_code, context):
    game = active_games[game_code]
    board = game['board']
    current_player = game['player1'] if game['current_turn'] == 'X' else game['player2']
    
    board_text = "–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã:\n"
    for i in range(0, 9, 3):
        board_text += f"{board[i]} | {board[i+1]} | {board[i+2]}\n"
        if i < 6:
            board_text += "---------\n"
    
    keyboard = create_board_keyboard(board, game_code)
    
    for player in [game['player1'], game['player2']]:
        if player != 'bot':
            await context.bot.send_message(
                chat_id=player,
                text=f"{board_text}\n–•–æ–¥ –∏–≥—Ä–æ–∫–∞: {'X' if game['current_turn'] == 'X' else 'O'}",
                reply_markup=keyboard
            )

async def handle_move(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    game_code, move = query.data.split('_')[1:]
    game = active_games.get(game_code)
    
    if not game:
        await query.edit_message_text("–≠—Ç–∞ –∏–≥—Ä–∞ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.")
        return MENU

    current_player = game['player1'] if game['current_turn'] == 'X' else game['player2']
    
    if query.from_user.id != current_player:
        await query.answer("–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!", show_alert=True)
        return GAME_PLAY

    move = int(move)
    if game['board'][move] == ' ':
        game['board'][move] = game['current_turn']
        game['current_turn'] = 'O' if game['current_turn'] == 'X' else 'X'
        game['last_activity'] = time.time()
        
        winner = check_winner(game['board'])
        if winner:
            await end_game(game_code, winner, context)
            return MENU
        elif ' ' not in game['board']:
            await end_game(game_code, 'draw', context)
            return MENU
        else:
            await send_board(game_code, context)
            return GAME_PLAY
    else:
        await query.answer("–≠—Ç–∞ –∫–ª–µ—Ç–∫–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞!", show_alert=True)
        return GAME_PLAY

def check_winner(board):
    winning_combinations = [
        [0, 1, 2], [3, 4, 5], [6, 7, 8],  # –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
        [0, 3, 6], [1, 4, 7], [2, 5, 8],  # –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
        [0, 4, 8], [2, 4, 6]  # –¥–∏–∞–≥–æ–Ω–∞–ª–∏
    ]
    for combo in winning_combinations:
        if board[combo[0]] == board[combo[1]] == board[combo[2]] != ' ':
            return board[combo[0]]
    return None

def bot_move(board):
    empty_cells = [i for i, cell in enumerate(board) if cell == ' ']
    return random.choice(empty_cells)

async def load_data():
    global active_games, player_stats
    if DATA_FILE.exists():
        with open(DATA_FILE, "r") as f:
            data = json.load(f)
            active_games = {k: v for k, v in data.get('active_games', {}).items() if time.time() - v['last_activity'] < 86400}
            player_stats = defaultdict(lambda: {"wins": 0, "losses": 0, "draws": 0}, data.get('player_stats', {}))
    logger.info("Data loaded successfully")

async def save_data():
    with open(DATA_FILE, "w") as f:
        json.dump({
            'active_games': active_games,
            'player_stats': dict(player_stats)
        }, f)
    logger.info("Data saved successfully")

async def auto_save(context: ContextTypes.DEFAULT_TYPE):
    await save_data()
    logger.info("Auto-save completed")

async def cleanup_games(context: ContextTypes.DEFAULT_TYPE):
    global active_games
    current_time = time.time()
    inactive_games = [code for code, game in active_games.items() if current_time - game['last_activity'] > 86400]
    for code in inactive_games:
        del active_games[code]
    logger.info(f"Cleaned up {len(inactive_games)} inactive games")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    context.bot_data.setdefault('usernames', {})[user.id] = user.first_name
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É –ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏.",
        reply_markup=get_main_keyboard()
    )
    return MENU

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üÜò –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "/start - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/newgame - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É\n"
        "/join [–∫–æ–¥] - –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ –ø–æ –∫–æ–¥—É\n"
        "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/rules - –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã\n"
        "/stats - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        "/leaderboard - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤"
    )
    await update.message.reply_text(help_text, reply_markup=get_main_keyboard())
    return MENU

async def show_rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    rules_text = (
        "–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏:\n\n"
        "1. –ò–≥—Ä–∞ –≤–µ–¥–µ—Ç—Å—è –Ω–∞ –ø–æ–ª–µ 3x3.\n"
        "2. –ò–≥—Ä–æ–∫–∏ —Ö–æ–¥—è—Ç –ø–æ –æ—á–µ—Ä–µ–¥–∏.\n"
        "3. –ü–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫ —Å—Ç–∞–≤–∏—Ç –∫—Ä–µ—Å—Ç–∏–∫–∏, –≤—Ç–æ—Ä–æ–π - –Ω–æ–ª–∏–∫–∏.\n"
        "4. –ü–æ–±–µ–∂–¥–∞–µ—Ç —Ç–æ—Ç, –∫—Ç–æ –ø–µ—Ä–≤—ã–º –≤—ã—Å—Ç—Ä–æ–∏—Ç –≤ —Ä—è–¥ 3 —Å–≤–æ–∏—Ö —Ñ–∏–≥—É—Ä—ã.\n"
        "5. –ï—Å–ª–∏ –≤—Å–µ –∫–ª–µ—Ç–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, –Ω–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –æ–±—ä—è–≤–ª—è–µ—Ç—Å—è –Ω–∏—á—å—è."
    )
    await update.message.reply_text(rules_text, reply_markup=get_main_keyboard())
    return MENU

async def handle_create_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    game_code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))
    active_games[game_code] = {
        'player1': update.effective_user.id,
        'player2': None,
        'board': [' ' for _ in range(9)],
        'current_turn': 'X',
        'last_activity': time.time()
    }
    await update.message.reply_text(f"–ù–æ–≤–∞—è –∏–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞! –ö–æ–¥ –∏–≥—Ä—ã: {game_code}")
    return MENU

async def handle_join_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–¥ –∏–≥—Ä—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /join")
        return MENU
    
    game_code = context.args[0].upper()
    game = active_games.get(game_code)
    
    if not game:
        await update.message.reply_text("–ò–≥—Ä–∞ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return MENU
    
    if game['player2']:
        await update.message.reply_text("–ö —ç—Ç–æ–π –∏–≥—Ä–µ —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –≤—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫.")
        return MENU
    
    game['player2'] = update.effective_user.id
    await update.message.reply_text(f"–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ {game_code}!")
    await start_game(update, context, game_code)
    return GAME_PLAY

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "–ù–æ–≤–∞—è –∏–≥—Ä–∞":
        return await handle_create_game(update, context)
    elif text == "–ò–≥—Ä–∞ —Å –±–æ—Ç–æ–º":
        return await create_bot_game(update, context)
    elif text == "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ":
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–≥—Ä—ã:")
        context.user_data['waiting_for_game_code'] = True
        return MENU
    elif text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        return await show_stats(update, context)
    elif text == "–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤":
        return await show_leaderboard(update, context)
    elif text == "–ü—Ä–∞–≤–∏–ª–∞":
        return await show_rules(update, context)
    elif text == "–ü–æ–º–æ—â—å":
        return await help_command(update, context)
    elif context.user_data.get('waiting_for_game_code'):
        return await join_game(update, context)
    else:
        await update.message.reply_text("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")
        return MENU

async def start_game(update: Update, context: ContextTypes.DEFAULT_TYPE, game_code):
    game = active_games.get(game_code)
    if not game:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –∏–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return MENU
    
    game['current_turn'] = 'X'
    await send_board(game_code, context)
    return GAME_PLAY

async def join_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    game_code = update.message.text.upper()
    context.user_data['waiting_for_game_code'] = False
    
    game = active_games.get(game_code)
    
    if not game:
        await update.message.reply_text("–ò–≥—Ä–∞ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return MENU
    
    if game['player2']:
        await update.message.reply_text("–ö —ç—Ç–æ–π –∏–≥—Ä–µ —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –≤—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫.")
        return MENU
    
    game['player2'] = update.effective_user.id
    await update.message.reply_text(f"–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ {game_code}!")
    return await start_game(update, context, game_code)

async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    stats = player_stats[user_id]
    total_games = stats["wins"] + stats["losses"] + stats["draws"]
    win_rate = (stats["wins"] / total_games * 100) if total_games > 0 else 0

    stats_text = (
        f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"–í—Å–µ–≥–æ –∏–≥—Ä: {total_games}\n"
        f"–ü–æ–±–µ–¥—ã: {stats['wins']}\n"
        f"–ü–æ—Ä–∞–∂–µ–Ω–∏—è: {stats['losses']}\n"
        f"–ù–∏—á—å–∏: {stats['draws']}\n"
        f"–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: {win_rate:.2f}%"
    )
    await update.message.reply_text(stats_text, reply_markup=get_main_keyboard())
    return MENU

async def show_leaderboard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    sorted_players = sorted(player_stats.items(), key=lambda x: x[1]["wins"], reverse=True)
    leaderboard_text = "üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤:\n\n"
    for i, (player_id, stats) in enumerate(sorted_players[:10], start=1):
        username = context.bot_data['usernames'].get(player_id, f"Player{player_id}")
        leaderboard_text += f"{i}. {username}: {stats['wins']} –ø–æ–±–µ–¥\n"
    await update.message.reply_text(leaderboard_text, reply_markup=get_main_keyboard())
    return MENU

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_keyboard())
    return MENU

async def end_game(game_code, result, context):
    game = active_games.pop(game_code, None)
    if not game:
        return

    if result == 'draw':
        message = "–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –≤–Ω–∏—á—å—é!"
        player_stats
		
async def end_game(game_code, result, context):
    game = active_games.pop(game_code, None)
    if not game:
        return

    if result == 'draw':
        message = "–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –≤–Ω–∏—á—å—é!"
        player_stats[game['player1']]["draws"] += 1
        if game['player2'] != 'bot':
            player_stats[game['player2']]["draws"] += 1
    else:
        winner = game['player1'] if result == 'X' else game['player2']
        loser = game['player2'] if result == 'X' else game['player1']
        message = f"–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {context.bot_data['usernames'].get(winner, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')} ({result})"
        if winner != 'bot':
            player_stats[winner]["wins"] += 1
        if loser != 'bot':
            player_stats[loser]["losses"] += 1

    for player in [game['player1'], game['player2']]:
        if player != 'bot':
            try:
                await context.bot.send_message(chat_id=player, text=message, reply_markup=get_main_keyboard())
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã –∏–≥—Ä–æ–∫—É {player}: {e}")

    await save_data()

async def create_bot_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    game_code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))
    active_games[game_code] = {
        'player1': update.effective_user.id,
        'player2': 'bot',
        'board': [' ' for _ in range(9)],
        'current_turn': 'X',
        'last_activity': time.time()
    }
    await update.message.reply_text(f"–ù–æ–≤–∞—è –∏–≥—Ä–∞ —Å –±–æ—Ç–æ–º —Å–æ–∑–¥–∞–Ω–∞! –ö–æ–¥ –∏–≥—Ä—ã: {game_code}")
    await start_game(update, context, game_code)
    return GAME_PLAY

async def handle_move_with_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    game_code, move = query.data.split('_')[2:]
    game = active_games.get(game_code)
    
    if not game:
        await query.edit_message_text("–≠—Ç–∞ –∏–≥—Ä–∞ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.")
        return MENU

    move = int(move)
    if game['board'][move] == ' ':
        game['board'][move] = 'X'
        game['last_activity'] = time.time()
        
        winner = check_winner(game['board'])
        if winner:
            await end_game(game_code, winner, context)
            return MENU
        elif ' ' not in game['board']:
            await end_game(game_code, 'draw', context)
            return MENU
        
        # –•–æ–¥ –±–æ—Ç–∞
        bot_move_index = bot_move(game['board'])
        game['board'][bot_move_index] = 'O'
        
        winner = check_winner(game['board'])
        if winner:
            await end_game(game_code, winner, context)
            return MENU
        elif ' ' not in game['board']:
            await end_game(game_code, 'draw', context)
            return MENU
        else:
            await send_board(game_code, context)
            return GAME_PLAY
    else:
        await query.answer("–≠—Ç–∞ –∫–ª–µ—Ç–∫–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞!", show_alert=True)
        return GAME_PLAY

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"Exception while handling an update: {context.error}")
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É

async def main() -> None:
    application = Application.builder().token(TOKEN).build()

    await load_data()  # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("rules", show_rules))
    application.add_handler(CommandHandler("newgame", handle_create_game))
    application.add_handler(CommandHandler("join", handle_join_game))
    application.add_handler(CommandHandler("stats", show_stats))
    application.add_handler(CommandHandler("leaderboard", show_leaderboard))
    application.add_handler(CommandHandler("cancel", cancel))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –∫–Ω–æ–ø–æ–∫)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    application.add_handler(CallbackQueryHandler(handle_move, pattern='^move_'))
    application.add_handler(CallbackQueryHandler(handle_move_with_bot, pattern='^move_bot_'))

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
    job_queue = application.job_queue
    job_queue.run_repeating(auto_save, interval=300, first=10)  # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    job_queue.run_daily(cleanup_games, time=datetime_time(hour=3, minute=0))  # –û—á–∏—Å—Ç–∫–∞ –≤ 3:00 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await application.initialize()
    await application.start()
    await application.updater.start_polling()

    logger.info("Bot started")

    # –î–µ—Ä–∂–∏–º –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    stop_signal = asyncio.Future()
    await stop_signal

    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
    await application.stop()
    await application.shutdown()

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        pass
    finally:
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
        asyncio.run(save_data())
        logger.info("Bot stopped and data saved")

async def handle_move_with_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    game_code, move = query.data.split('_')[2:]
    game = active_games.get(game_code)
    
    if not game:
        await query.edit_message_text("–≠—Ç–∞ –∏–≥—Ä–∞ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.")
        return MENU

    move = int(move)
    if game['board'][move] == ' ':
        game['board'][move] = 'X'
        game['last_activity'] = time.time()
        
        winner = check_winner(game['board'])
        if winner:
            await end_game(game_code, winner, context)
            return MENU
        elif ' ' not in game['board']:
            await end_game(game_code, 'draw', context)
            return MENU
        
        # –•–æ–¥ –±–æ—Ç–∞
        bot_move_index = bot_move(game['board'])
        game['board'][bot_move_index] = 'O'
        
        winner = check_winner(game['board'])
        if winner:
            await end_game(game_code, winner, context)
            return MENU
        elif ' ' not in game['board']:
            await end_game(game_code, 'draw', context)
            return MENU
        else:
            await send_board(game_code, context)
            return GAME_PLAY
    else:
        await query.answer("–≠—Ç–∞ –∫–ª–µ—Ç–∫–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞!", show_alert=True)
        return GAME_PLAY

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"Exception while handling an update: {context.error}")
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É

async def send_daily_stats(context: ContextTypes.DEFAULT_TYPE):
    total_games = sum(len(player['wins'] + player['losses'] + player['draws']) for player in player_stats.values())
    active_players = len(player_stats)
    
    stats_message = (
        f"üìä –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"–í—Å–µ–≥–æ –∏–≥—Ä: {total_games}\n"
        f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: {active_players}\n"
    )
    
    # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —á–∞—Ç
    # –ù–∞–ø—Ä–∏–º–µ—Ä:
    # await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=stats_message)

async def main() -> None:
    application = Application.builder().token(TOKEN).build()

    await load_data()  # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("rules", show_rules))
    application.add_handler(CommandHandler("newgame", handle_create_game))
    application.add_handler(CommandHandler("join", handle_join_game))
    application.add_handler(CommandHandler("stats", show_stats))
    application.add_handler(CommandHandler("leaderboard", show_leaderboard))
    application.add_handler(CommandHandler("cancel", cancel))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –∫–Ω–æ–ø–æ–∫)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    application.add_handler(CallbackQueryHandler(handle_move, pattern='^move_'))
    application.add_handler(CallbackQueryHandler(handle_move_with_bot, pattern='^move_bot_'))

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —á–∞—Ç–µ
    application.add_handler(ChatMemberHandler(handle_chat_member, ChatMemberHandler.MY_CHAT_MEMBER))

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
    job_queue = application.job_queue
    job_queue.run_repeating(auto_save, interval=300, first=10)  # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    job_queue.run_daily(cleanup_games, time=datetime_time(hour=3, minute=0))  # –û—á–∏—Å—Ç–∫–∞ –≤ 3:00 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await application.initialize()
    await application.start()
    await application.updater.start_polling()

    logger.info("Bot started")

    # –î–µ—Ä–∂–∏–º –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    stop_signal = asyncio.Future()
    await stop_signal

    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
    await application.stop()
    await application.shutdown()

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        pass
    finally:
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
        asyncio.run(save_data())
        logger.info("Bot stopped and data saved")