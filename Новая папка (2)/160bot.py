import logging
import random
import string
import json
import asyncio
import time
from datetime import datetime, time as datetime_time

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ConversationHandler, filters, ContextTypes
from telegram.error import TelegramError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
TOKEN = '7285079982:AAF7h-dP_WbeHQjOUYr-BvTtR02GJHkBmtQ'

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
MENU, GAME_MODE, PLAYER_NAME, GAME_PLAY, HINTS = range(5)

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
active_games = {}
player_stats = {}
achievements = {}
daily_tasks = {}

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
def get_main_keyboard():
    keyboard = [
        [KeyboardButton("üéÆ –ù–æ–≤–∞—è –∏–≥—Ä–∞"), KeyboardButton("ü§ñ –ò–≥—Ä–∞—Ç—å —Å –±–æ—Ç–æ–º")],
        [KeyboardButton("üìú –ü—Ä–∞–≤–∏–ª–∞"), KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton("üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤"), KeyboardButton("üèÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è")],
        [KeyboardButton("üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
	
	# –î–æ–±–∞–≤—å—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é start –∑–¥–µ—Å—å
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user = update.effective_user
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É –ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏.",
        reply_markup=get_main_keyboard()
    )
    return MENU


# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–¥ —Ñ—É–Ω–∫—Ü–∏–µ–π main()

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üÜò –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "/start - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/newgame - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É\n"
        "/join [–∫–æ–¥] - –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ –ø–æ –∫–æ–¥—É\n"
        "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/rules - –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã"
    )
    await update.message.reply_text(help_text, reply_markup=get_main_keyboard())
    return MENU

# –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    text = update.message.text
    if text == "üéÆ –ù–æ–≤–∞—è –∏–≥—Ä–∞":
        return await game_mode(update, context)
    elif text == "ü§ñ –ò–≥—Ä–∞—Ç—å —Å –±–æ—Ç–æ–º":
        return await play_with_bot(update, context)
    elif text == "üìú –ü—Ä–∞–≤–∏–ª–∞":
        return await show_rules(update, context)
    elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        return await show_stats(update, context)
    elif text == "üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤":
        return await show_leaderboard(update, context)
    elif text == "üèÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è":
        return await show_achievements(update, context)
    elif text == "üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ":
        return await daily_challenge(update, context)
    elif text == "üë• –ò–≥—Ä–∞ —Å –¥—Ä—É–≥–æ–º":
        return await handle_create_game(update, context)
    elif text == "üîç –°–ª—É—á–∞–π–Ω—ã–π —Å–æ–ø–µ—Ä–Ω–∏–∫":
        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
        await update.message.reply_text("–ü–æ–∏—Å–∫ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω.", reply_markup=get_main_keyboard())
        return MENU
    elif text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await update.message.reply_text("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_keyboard())
        return MENU
    else:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.", reply_markup=get_main_keyboard())
        return MENU

async def game_mode(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –∏–≥—Ä—ã."""
    keyboard = [
        [KeyboardButton("üë• –ò–≥—Ä–∞ —Å –¥—Ä—É–≥–æ–º"), KeyboardButton("üîç –°–ª—É—á–∞–π–Ω—ã–π —Å–æ–ø–µ—Ä–Ω–∏–∫")],
        [KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–≥—Ä—ã:\n\n"
        "üë• –ò–≥—Ä–∞ —Å –¥—Ä—É–≥–æ–º - –°–æ–∑–¥–∞–π—Ç–µ –∏–≥—Ä—É –∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞\n"
        "üîç –°–ª—É—á–∞–π–Ω—ã–π —Å–æ–ø–µ—Ä–Ω–∏–∫ - –ù–∞–π–¥–∏—Ç–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –¥–ª—è –∏–≥—Ä—ã\n"
        "‚óÄÔ∏è –ù–∞–∑–∞–¥ - –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=reply_markup
    )
    return GAME_MODE

def create_game(player1_id):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã."""
    game_code = ''.join(random.choices(string.ascii_uppercase, k=4))
    active_games[game_code] = {
        'player1': player1_id,
        'player2': None,
        'board': [' ' for _ in range(9)],
        'current_turn': 'X',
        'last_activity': time.time()
    }
    return game_code

async def handle_create_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã."""
    game_code = create_game(update.effective_user.id)
    await update.message.reply_text(
        f"–ù–æ–≤–∞—è –∏–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞! –ö–æ–¥ –∏–≥—Ä—ã: {game_code}\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –¥—Ä—É–≥—É, —á—Ç–æ–±—ã –æ–Ω –º–æ–≥ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è.\n"
        f"–î—Ä—É–≥ –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /join {game_code}",
        reply_markup=get_main_keyboard()
    )
    return MENU

# –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É–µ—Ç...

# –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∫–æ–¥–∞...

def join_game(game_code, player2_id):
    """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∏–≥—Ä–µ."""
    if game_code in active_games and active_games[game_code]['player2'] is None:
        active_games[game_code]['player2'] = player2_id
        active_games[game_code]['last_activity'] = time.time()
        return True
    return False

async def handle_join_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∏–≥—Ä–µ."""
    if not context.args:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–¥ –∏–≥—Ä—ã. –ù–∞–ø—Ä–∏–º–µ—Ä: /join ABCD",
            reply_markup=get_main_keyboard()
        )
        return MENU
    
    game_code = context.args[0]
    if join_game(game_code, update.effective_user.id):
        keyboard = [[InlineKeyboardButton("–ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data=f'start_game_{game_code}')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ {game_code}!",
            reply_markup=reply_markup
        )
        return GAME_PLAY
    else:
        await update.message.reply_text(
            "–ò–≥—Ä–∞ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞.",
            reply_markup=get_main_keyboard()
        )
        return MENU

async def start_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –∏–≥—Ä—ã."""
    query = update.callback_query
    await query.answer()
    
    game_code = query.data.split('_')[-1]
    game = active_games[game_code]
    
    await context.bot.send_message(game['player1'], "–ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! –í—ã –∏–≥—Ä–∞–µ—Ç–µ –∑–∞ ‚ùå.")
    await context.bot.send_message(game['player2'], "–ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! –í—ã –∏–≥—Ä–∞–µ—Ç–µ –∑–∞ ‚≠ï.")
    
    await send_board(game_code, context)
    return GAME_PLAY

async def send_board(game_code, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è."""
    game = active_games[game_code]
    board = game['board']
    keyboard = [
        [InlineKeyboardButton(board[i] or ' ', callback_data=f'move_{game_code}_{i}') for i in range(3)],
        [InlineKeyboardButton(board[i] or ' ', callback_data=f'move_{game_code}_{i}') for i in range(3, 6)],
        [InlineKeyboardButton(board[i] or ' ', callback_data=f'move_{game_code}_{i}') for i in range(6, 9)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    current_player = game['player1'] if game['current_turn'] == 'X' else game['player2']
    await context.bot.send_message(
        current_player,
        f"–í–∞—à —Ö–æ–¥ ({game['current_turn']}):",
        reply_markup=reply_markup
    )

# ... (–ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–¥)

async def handle_move(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... (–∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ handle_move)

# –î–æ–±–∞–≤—å—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é handle_move_with_bot –∑–¥–µ—Å—å

async def handle_move(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞."""
    query = update.callback_query
    await query.answer()
    
    game_code, move = query.data.split('_')[1:]
    game = active_games.get(game_code)
    
    if not game:
        await query.edit_message_text("–≠—Ç–∞ –∏–≥—Ä–∞ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.")
        return MENU

    current_player = game['player1'] if game['current_turn'] == 'X' else game['player2']
    
    if query.from_user.id != current_player:
        await query.answer("–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!", show_alert=True)
        return GAME_PLAY

    move = int(move)
    if game['board'][move] == ' ':
        game['board'][move] = game['current_turn']
        game['current_turn'] = 'O' if game['current_turn'] == 'X' else 'X'
        game['last_activity'] = time.time()
        
        winner = check_winner(game['board'])
        if winner:
            await end_game(game_code, winner, context)
            return MENU
        elif ' ' not in game['board']:
            await end_game(game_code, 'draw', context)
            return MENU
        else:
            await send_board(game_code, context)
            return GAME_PLAY
    else:
        await query.answer("–≠—Ç–∞ –∫–ª–µ—Ç–∫–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞!", show_alert=True)
        return GAME_PLAY

# –ü—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–¥...

async def handle_move(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞."""
    query = update.callback_query
    await query.answer()
    
    game_code, move = query.data.split('_')[1:]
    game = active_games.get(game_code)
    
    if not game:
        await query.edit_message_text("–≠—Ç–∞ –∏–≥—Ä–∞ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.")
        return MENU

    current_player = game['player1'] if game['current_turn'] == 'X' else game['player2']
    
    if query.from_user.id != current_player:
        await query.answer("–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!", show_alert=True)
        return GAME_PLAY

    move = int(move)
    if game['board'][move] == ' ':
        game['board'][move] = game['current_turn']
        game['current_turn'] = 'O' if game['current_turn'] == 'X' else 'X'
        game['last_activity'] = time.time()
        
        winner = check_winner(game['board'])
        if winner:
            await end_game(game_code, winner, context)
            return MENU
        elif ' ' not in game['board']:
            await end_game(game_code, 'draw', context)
            return MENU
        else:
            await send_board(game_code, context)
            return GAME_PLAY
    else:
        await query.answer("–≠—Ç–∞ –∫–ª–µ—Ç–∫–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞!", show_alert=True)
        return GAME_PLAY

async def handle_move_with_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞ –≤ –∏–≥—Ä–µ —Å –±–æ—Ç–æ–º."""
    query = update.callback_query
    await query.answer()
    
    game_code, move = query.data.split('_')[2:]
    game = active_games.get(game_code)
    
    if not game:
        await query.edit_message_text("–≠—Ç–∞ –∏–≥—Ä–∞ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.")
        return MENU

    move = int(move)
    if game['board'][move] == ' ':
        game['board'][move] = 'X'
        game['last_activity'] = time.time()
        
        winner = check_winner(game['board'])
        if winner:
            await end_bot_game(game_code, winner, context)
            return MENU
        elif ' ' not in game['board']:
            await end_bot_game(game_code, 'draw', context)
            return MENU
        
        # –•–æ–¥ –±–æ—Ç–∞
        bot_move = get_bot_move(game['board'])
        game['board'][bot_move] = 'O'
        
        winner = check_winner(game['board'])
        if winner:
            await end_bot_game(game_code, winner, context)
            return MENU
        elif ' ' not in game['board']:
            await end_bot_game(game_code, 'draw', context)
            return MENU
        else:
            await send_board(game_code, context)
            return GAME_PLAY
    else:
        await query.answer("–≠—Ç–∞ –∫–ª–µ—Ç–∫–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞!", show_alert=True)
        return GAME_PLAY

# –°–ª–µ–¥—É—é—â–∏–π –∫–æ–¥...

def check_winner(board):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è."""
    winning_combinations = [
        [0, 1, 2], [3, 4, 5], [6, 7, 8],  # –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
        [0, 3, 6], [1, 4, 7], [2, 5, 8],  # –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
        [0, 4, 8], [2, 4, 6]  # –¥–∏–∞–≥–æ–Ω–∞–ª–∏
    ]
    for combo in winning_combinations:
        if board[combo[0]] == board[combo[1]] == board[combo[2]] != ' ':
            return board[combo[0]]
    return None

async def end_game(game_code, result, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã."""
    game = active_games[game_code]
    board = game['board']
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ—Å–∫–∏
    keyboard = [
        [InlineKeyboardButton(board[i] or ' ', callback_data='_') for i in range(3)],
        [InlineKeyboardButton(board[i] or ' ', callback_data='_') for i in range(3, 6)],
        [InlineKeyboardButton(board[i] or ' ', callback_data='_') for i in range(6, 9)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if result == 'X':
        await context.bot.send_message(game['player1'], "üéâ –í—ã –ø–æ–±–µ–¥–∏–ª–∏!", reply_markup=reply_markup)
        await context.bot.send_message(game['player2'], "üòî –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.", reply_markup=reply_markup)
        await update_stats(game['player1'], 'win')
        await update_stats(game['player2'], 'lose')
    elif result == 'O':
        await context.bot.send_message(game['player2'], "üéâ –í—ã –ø–æ–±–µ–¥–∏–ª–∏!", reply_markup=reply_markup)
        await context.bot.send_message(game['player1'], "üòî –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.", reply_markup=reply_markup)
        await update_stats(game['player2'], 'win')
        await update_stats(game['player1'], 'lose')
    else:
        await context.bot.send_message(game['player1'], "ü§ù –ù–∏—á—å—è!", reply_markup=reply_markup)
        await context.bot.send_message(game['player2'], "ü§ù –ù–∏—á—å—è!", reply_markup=reply_markup)
        await update_stats(game['player1'], 'draw')
        await update_stats(game['player2'], 'draw')
    
    del active_games[game_code]

# –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É–µ—Ç...

# –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∫–æ–¥–∞...

async def update_stats(player_id, result):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞."""
    if player_id not in player_stats:
        player_stats[player_id] = {'wins': 0, 'losses': 0, 'draws': 0}
    
    if result == 'win':
        player_stats[player_id]['wins'] += 1
    elif result == 'lose':
        player_stats[player_id]['losses'] += 1
    else:
        player_stats[player_id]['draws'] += 1
    
    await update_achievements(player_id)
    await check_daily_task(player_id, result)

async def show_leaderboard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤."""
    sorted_players = sorted(player_stats.items(), key=lambda x: x[1]['wins'], reverse=True)
    leaderboard_text = "üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤:\n\n"
    for i, (player_id, stats) in enumerate(sorted_players[:10], start=1):
        user = await context.bot.get_chat(player_id)
        leaderboard_text += f"{i}. {user.first_name}: {stats['wins']} –ø–æ–±–µ–¥\n"
    
    await update.message.reply_text(leaderboard_text, reply_markup=get_main_keyboard())
    return MENU

async def show_achievements(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞."""
    player_id = update.effective_user.id
    player_achievements = achievements.get(player_id, set())
    
    achievements_text = "üèÖ –í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n\n"
    if 'first_game' in player_achievements:
        achievements_text += "üéÆ –ü–µ—Ä–≤–∞—è –∏–≥—Ä–∞\n"
    if 'first_win' in player_achievements:
        achievements_text += "ü•á –ü–µ—Ä–≤–∞—è –ø–æ–±–µ–¥–∞\n"
    if 'experienced_player' in player_achievements:
        achievements_text += "üèÜ –û–ø—ã—Ç–Ω—ã–π –∏–≥—Ä–æ–∫ (10+ –∏–≥—Ä)\n"
    if 'winner' in player_achievements:
        achievements_text += "üåü –ü–æ–±–µ–¥–∏—Ç–µ–ª—å (5+ –ø–æ–±–µ–¥)\n"
    if 'master' in player_achievements:
        achievements_text += "üëë –ú–∞—Å—Ç–µ—Ä –∏–≥—Ä—ã (10+ –ø–æ–±–µ–¥)\n"
    
    if not player_achievements:
        achievements_text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. –ò–≥—Ä–∞–π—Ç–µ –±–æ–ª—å—à–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏—Ö!"
    
    await update.message.reply_text(achievements_text, reply_markup=get_main_keyboard())
    return MENU

async def daily_challenge(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ."""
    player_id = update.effective_user.id
    today = datetime.now().date()
    
    if player_id not in daily_tasks or daily_tasks[player_id]['date'] != today:
        daily_tasks[player_id] = {
            'date': today,
            'task': '–í—ã–∏–≥—Ä–∞–π—Ç–µ –æ–¥–Ω—É –∏–≥—Ä—É',
            'completed': False
        }
    
    task = daily_tasks[player_id]
    if task['completed']:
        task_text = "üéâ –í—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞!"
    else:
        task_text = f"üìÖ –í–∞—à–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ: {task['task']}"
    
    await update.message.reply_text(task_text, reply_markup=get_main_keyboard())
    return MENU

async def show_rules(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã."""
    rules_text = (
        "üìú –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –≤ –ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏:\n\n"
        "1. –ò–≥—Ä–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç –Ω–∞ –ø–æ–ª–µ 3x3.\n"
        "2. –ò–≥—Ä–æ–∫–∏ —Ö–æ–¥—è—Ç –ø–æ –æ—á–µ—Ä–µ–¥–∏, —Å—Ç–∞–≤—è —Å–≤–æ–π —Å–∏–º–≤–æ–ª (‚ùå –∏–ª–∏ ‚≠ï) –≤ —Å–≤–æ–±–æ–¥–Ω—É—é –∫–ª–µ—Ç–∫—É.\n"
        "3. –¶–µ–ª—å - —Å–æ–±—Ä–∞—Ç—å —Ç—Ä–∏ —Å–≤–æ–∏—Ö —Å–∏–º–≤–æ–ª–∞ –≤ —Ä—è–¥ (–ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏, –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ –∏–ª–∏ –¥–∏–∞–≥–æ–Ω–∞–ª–∏).\n"
        "4. –ü–æ–±–µ–∂–¥–∞–µ—Ç —Ç–æ—Ç, –∫—Ç–æ –ø–µ—Ä–≤—ã–º —Å–æ–±–µ—Ä–µ—Ç —Ç—Ä–∏ —Å–∏–º–≤–æ–ª–∞ –≤ —Ä—è–¥.\n"
        "5. –ï—Å–ª–∏ –≤—Å–µ –∫–ª–µ—Ç–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, –Ω–æ –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–±–µ–¥–∏–ª - —ç—Ç–æ –Ω–∏—á—å—è.\n\n"
        "–£–¥–∞—á–∏ –≤ –∏–≥—Ä–µ! üçÄ"
    )
    await update.message.reply_text(rules_text, reply_markup=get_main_keyboard())
    return MENU

async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞."""
    player_id = update.effective_user.id
    stats = player_stats.get(player_id, {'wins': 0, 'losses': 0, 'draws': 0})
    
    stats_text = (
        "üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"üèÜ –ü–æ–±–µ–¥—ã: {stats['wins']}\n"
        f"üòî –ü–æ—Ä–∞–∂–µ–Ω–∏—è: {stats['losses']}\n"
        f"ü§ù –ù–∏—á—å–∏: {stats['draws']}\n"
        f"üéÆ –í—Å–µ–≥–æ –∏–≥—Ä: {stats['wins'] + stats['losses'] + stats['draws']}"
    )
    await update.message.reply_text(stats_text, reply_markup=get_main_keyboard())
    return MENU

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_keyboard())
    return MENU

# –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É–µ—Ç...

# –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∫–æ–¥–∞...

async def update_achievements(player_id):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏–≥—Ä–æ–∫–∞."""
    if player_id not in achievements:
        achievements[player_id] = set()
    
    stats = player_stats.get(player_id, {'wins': 0, 'losses': 0, 'draws': 0})
    total_games = stats['wins'] + stats['losses'] + stats['draws']
    
    if total_games >= 1 and 'first_game' not in achievements[player_id]:
        achievements[player_id].add('first_game')
        await notify_achievement(player_id, "üéÆ –ü–µ—Ä–≤–∞—è –∏–≥—Ä–∞")
    
    if stats['wins'] >= 1 and 'first_win' not in achievements[player_id]:
        achievements[player_id].add('first_win')
        await notify_achievement(player_id, "ü•á –ü–µ—Ä–≤–∞—è –ø–æ–±–µ–¥–∞")
    
    if total_games >= 10 and 'experienced_player' not in achievements[player_id]:
        achievements[player_id].add('experienced_player')
        await notify_achievement(player_id, "üèÜ –û–ø—ã—Ç–Ω—ã–π –∏–≥—Ä–æ–∫ (10+ –∏–≥—Ä)")
    
    if stats['wins'] >= 5 and 'winner' not in achievements[player_id]:
        achievements[player_id].add('winner')
        await notify_achievement(player_id, "üåü –ü–æ–±–µ–¥–∏—Ç–µ–ª—å (5+ –ø–æ–±–µ–¥)")
    
    if stats['wins'] >= 10 and 'master' not in achievements[player_id]:
        achievements[player_id].add('master')
        await notify_achievement(player_id, "üëë –ú–∞—Å—Ç–µ—Ä –∏–≥—Ä—ã (10+ –ø–æ–±–µ–¥)")

async def notify_achievement(player_id, achievement_text):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏."""
    await application.bot.send_message(
        player_id,
        f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ:\n{achievement_text}"
    )

async def check_daily_task(player_id, result):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è."""
    today = datetime.now().date()
    if player_id in daily_tasks and daily_tasks[player_id]['date'] == today:
        task = daily_tasks[player_id]
        if not task['completed']:
            if (task['task'] == '–í—ã–∏–≥—Ä–∞–π—Ç–µ –æ–¥–Ω—É –∏–≥—Ä—É' and result == 'win') or \
               (task['task'] == '–°—ã–≥—Ä–∞–π—Ç–µ –æ–¥–Ω—É –∏–≥—Ä—É' and result in ['win', 'lose', 'draw']):
                task['completed'] = True
                await application.bot.send_message(
                    player_id,
                    "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ!"
                )

async def show_rules(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã."""
    rules_text = (
        "üìú –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –≤ –ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏:\n\n"
        "1. –ò–≥—Ä–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç –Ω–∞ –ø–æ–ª–µ 3x3.\n"
        "2. –ò–≥—Ä–æ–∫–∏ —Ö–æ–¥—è—Ç –ø–æ –æ—á–µ—Ä–µ–¥–∏, —Å—Ç–∞–≤—è —Å–≤–æ–π —Å–∏–º–≤–æ–ª (‚ùå –∏–ª–∏ ‚≠ï) –≤ —Å–≤–æ–±–æ–¥–Ω—É—é –∫–ª–µ—Ç–∫—É.\n"
        "3. –¶–µ–ª—å - —Å–æ–±—Ä–∞—Ç—å —Ç—Ä–∏ —Å–≤–æ–∏—Ö —Å–∏–º–≤–æ–ª–∞ –≤ —Ä—è–¥ (–ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏, –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ –∏–ª–∏ –¥–∏–∞–≥–æ–Ω–∞–ª–∏).\n"
        "4. –ü–æ–±–µ–∂–¥–∞–µ—Ç —Ç–æ—Ç, –∫—Ç–æ –ø–µ—Ä–≤—ã–º —Å–æ–±–µ—Ä–µ—Ç —Ç—Ä–∏ —Å–∏–º–≤–æ–ª–∞ –≤ —Ä—è–¥.\n"
        "5. –ï—Å–ª–∏ –≤—Å–µ –∫–ª–µ—Ç–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, –Ω–æ –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–±–µ–¥–∏–ª - —ç—Ç–æ –Ω–∏—á—å—è.\n\n"
        "–£–¥–∞—á–∏ –≤ –∏–≥—Ä–µ! üçÄ"
    )
    await update.message.reply_text(rules_text, reply_markup=get_main_keyboard())
    return MENU

async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞."""
    player_id = update.effective_user.id
    stats = player_stats.get(player_id, {'wins': 0, 'losses': 0, 'draws': 0})
    
    stats_text = (
        "üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"üèÜ –ü–æ–±–µ–¥—ã: {stats['wins']}\n"
        f"üòî –ü–æ—Ä–∞–∂–µ–Ω–∏—è: {stats['losses']}\n"
        f"ü§ù –ù–∏—á—å–∏: {stats['draws']}\n"
        f"üéÆ –í—Å–µ–≥–æ –∏–≥—Ä: {stats['wins'] + stats['losses'] + stats['draws']}"
    )
    await update.message.reply_text(stats_text, reply_markup=get_main_keyboard())
    return MENU

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_keyboard())
    return MENU

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
async def save_data():
    data = {
        'player_stats': player_stats,
        'achievements': achievements,
        'daily_tasks': daily_tasks
    }
    with open('game_data.json', 'w') as f:
        json.dump(data, f)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
async def load_data():
    global player_stats, achievements, daily_tasks
    try:
        with open('game_data.json', 'r') as f:
            data = json.load(f)
            player_stats = data.get('player_stats', {})
            achievements = data.get('achievements', {})
            daily_tasks = data.get('daily_tasks', {})
    except FileNotFoundError:
        logger.info("Data file not found. Starting with empty data.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.error(f"Exception while handling an update: {context.error}")
    try:
        raise context.error
    except TelegramError as e:
        logger.error(f"Telegram Error: {e.message}")
    except Exception as e:
        logger.error(f"Unexpected error: {str(e)}")

# –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
async def auto_save(context: ContextTypes.DEFAULT_TYPE) -> None:
    await save_data()
    logger.info("Auto-saved game data")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä
async def cleanup_games(context: ContextTypes.DEFAULT_TYPE) -> None:
    current_time = time.time()
    for game_code in list(active_games.keys()):
        if current_time - active_games[game_code].get('last_activity', 0) > 3600:  # 1 —á–∞—Å –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            del active_games[game_code]
    logger.info("Cleaned up inactive games")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main() -> None:
    global application
    await load_data()  # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ

    application = Application.builder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("rules", show_rules))
    application.add_handler(CommandHandler("newgame", handle_create_game))
    application.add_handler(CommandHandler("join", handle_join_game))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –∫–Ω–æ–ø–æ–∫)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    application.add_handler(CallbackQueryHandler(start_game, pattern='^start_game_'))
    application.add_handler(CallbackQueryHandler(handle_move, pattern='^move_'))
    application.add_handler(CallbackQueryHandler(handle_move_with_bot, pattern='^move_bot_'))

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
    job_queue = application.job_queue
    job_queue.run_repeating(auto_save, interval=300, first=10)  # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    job_queue.run_daily(cleanup_games, time=datetime_time(hour=3, minute=0))  # –û—á–∏—Å—Ç–∫–∞ –≤ 3:00 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await application.initialize()
    await application.start()
    await application.updater.start_polling()

    logger.info("Bot started")

    # –î–µ—Ä–∂–∏–º –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    stop_signal = asyncio.Future()
    await stop_signal

    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
    await application.stop()
    await application.shutdown()

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        pass  # –ü–æ–∑–≤–æ–ª—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Ctrl+C
    finally:
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
        asyncio.run(save_data())
        logger.info("Bot stopped and data saved")
		