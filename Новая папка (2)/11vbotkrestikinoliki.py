import logging
import random
import string
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, ConversationHandler, MessageHandler, filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
TOKEN = '7285079982:AAF7h-dP_WbeHQjOUYr-BvTtR02GJHkBmtQ'

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
MENU, GAME_MODE, PLAYER_NAME, GAME_PLAY, HINTS = range(5)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä
active_games = {}

def start(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user = update.effective_user
    update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É –ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–ù–æ–≤–∞—è –∏–≥—Ä–∞", callback_data='new_game')],
            [InlineKeyboardButton("–ü—Ä–∞–≤–∏–ª–∞", callback_data='rules')],
            [InlineKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')]
        ])
    )
    return MENU

def menu_handler(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    query = update.callback_query
    query.answer()
    
    if query.data == 'new_game':
        return game_mode(update, context)
    elif query.data == 'rules':
        return show_rules(update, context)
    elif query.data == 'stats':
        return show_stats(update, context)

def game_mode(update: Update, context):
    """–í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –∏–≥—Ä—ã."""
    query = update.callback_query
    query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–≥—Ä—ã:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–ò–≥—Ä–∞ —Å –±–æ—Ç–æ–º", callback_data='bot_game')],
            [InlineKeyboardButton("–ò–≥—Ä–∞ —Å –¥—Ä—É–≥–æ–º", callback_data='friend_game')],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_menu')]
        ])
    )
    return GAME_MODE

def create_game(player1_id):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã."""
    game_code = ''.join(random.choices(string.ascii_uppercase, k=4))
    active_games[game_code] = {
        'player1': player1_id,
        'player2': None,
        'board': [' ' for _ in range(9)],
        'current_turn': 'X'
    }
    return game_code

def handle_create_game(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã."""
    game_code = create_game(update.effective_user.id)
    update.message.reply_text(
        f"–ù–æ–≤–∞—è –∏–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞! –ö–æ–¥ –∏–≥—Ä—ã: {game_code}\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –¥—Ä—É–≥—É, —á—Ç–æ–±—ã –æ–Ω –º–æ–≥ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è.\n"
        f"–î—Ä—É–≥ –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /join {game_code}"
    )

def join_game(game_code, player2_id):
    """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∏–≥—Ä–µ."""
    if game_code in active_games and active_games[game_code]['player2'] is None:
        active_games[game_code]['player2'] = player2_id
        return True
    return False

def handle_join_game(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∏–≥—Ä–µ."""
    if not context.args:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–¥ –∏–≥—Ä—ã. –ù–∞–ø—Ä–∏–º–µ—Ä: /join ABCD")
        return
    
    game_code = context.args[0]
    if join_game(game_code, update.effective_user.id):
        update.message.reply_text(f"–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ {game_code}!")
        start_game(game_code, context)
    else:
        update.message.reply_text("–ò–≥—Ä–∞ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞.")

def start_game(game_code, context):
    """–ù–∞—á–∞–ª–æ –∏–≥—Ä—ã."""
    game = active_games[game_code]
    context.bot.send_message(game['player1'], "–ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! –í—ã –∏–≥—Ä–∞–µ—Ç–µ –∑–∞ X.")
    context.bot.send_message(game['player2'], "–ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! –í—ã –∏–≥—Ä–∞–µ—Ç–µ –∑–∞ O.")
    send_board(game_code, context)

def send_board(game_code, context):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è."""
    game = active_games[game_code]
    board = game['board']
    keyboard = [
        [InlineKeyboardButton(board[i] or ' ', callback_data=f'move_{game_code}_{i}') for i in range(3)],
        [InlineKeyboardButton(board[i] or ' ', callback_data=f'move_{game_code}_{i}') for i in range(3, 6)],
        [InlineKeyboardButton(board[i] or ' ', callback_data=f'move_{game_code}_{i}') for i in range(6, 9)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    current_player = game['player1'] if game['current_turn'] == 'X' else game['player2']
    context.bot.send_message(current_player, "–í–∞—à —Ö–æ–¥:", reply_markup=reply_markup)

# –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É–µ—Ç...

# –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∫–æ–¥–∞...

def handle_move(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞."""
    query = update.callback_query
    query.answer()
    
    game_code, move = query.data.split('_')[1:]
    game = active_games.get(game_code)
    
    if not game:
        query.edit_message_text("–≠—Ç–∞ –∏–≥—Ä–∞ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.")
        return

    current_player = game['player1'] if game['current_turn'] == 'X' else game['player2']
    
    if query.from_user.id != current_player:
        query.answer("–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!", show_alert=True)
        return

    move = int(move)
    if game['board'][move] == ' ':
        game['board'][move] = game['current_turn']
        game['current_turn'] = 'O' if game['current_turn'] == 'X' else 'X'
        
        winner = check_winner(game['board'])
        if winner:
            end_game(game_code, winner, context)
        elif ' ' not in game['board']:
            end_game(game_code, 'draw', context)
        else:
            send_board(game_code, context)
    else:
        query.answer("–≠—Ç–∞ –∫–ª–µ—Ç–∫–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞!", show_alert=True)

def check_winner(board):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è."""
    winning_combinations = [
        [0, 1, 2], [3, 4, 5], [6, 7, 8],  # –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
        [0, 3, 6], [1, 4, 7], [2, 5, 8],  # –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
        [0, 4, 8], [2, 4, 6]  # –¥–∏–∞–≥–æ–Ω–∞–ª–∏
    ]
    for combo in winning_combinations:
        if board[combo[0]] == board[combo[1]] == board[combo[2]] != ' ':
            return board[combo[0]]
    return None

def end_game(game_code, result, context):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã."""
    game = active_games[game_code]
    board = game['board']
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ—Å–∫–∏
    keyboard = [
        [InlineKeyboardButton(board[i] or ' ', callback_data='_') for i in range(3)],
        [InlineKeyboardButton(board[i] or ' ', callback_data='_') for i in range(3, 6)],
        [InlineKeyboardButton(board[i] or ' ', callback_data='_') for i in range(6, 9)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if result == 'X':
        context.bot.send_message(game['player1'], "–í—ã –ø–æ–±–µ–¥–∏–ª–∏!", reply_markup=reply_markup)
        context.bot.send_message(game['player2'], "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.", reply_markup=reply_markup)
    elif result == 'O':
        context.bot.send_message(game['player2'], "–í—ã –ø–æ–±–µ–¥–∏–ª–∏!", reply_markup=reply_markup)
        context.bot.send_message(game['player1'], "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.", reply_markup=reply_markup)
    else:
        context.bot.send_message(game['player1'], "–ù–∏—á—å—è!", reply_markup=reply_markup)
        context.bot.send_message(game['player2'], "–ù–∏—á—å—è!", reply_markup=reply_markup)
    
    del active_games[game_code]

def show_rules(update: Update, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã."""
    rules_text = (
        "–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –≤ –ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏:\n\n"
        "1. –ò–≥—Ä–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç –Ω–∞ –ø–æ–ª–µ 3x3.\n"
        "2. –ò–≥—Ä–æ–∫–∏ —Ö–æ–¥—è—Ç –ø–æ –æ—á–µ—Ä–µ–¥–∏, —Å—Ç–∞–≤—è —Å–≤–æ–π —Å–∏–º–≤–æ–ª (‚ùå –∏–ª–∏ ‚≠ï) –≤ —Å–≤–æ–±–æ–¥–Ω—É—é –∫–ª–µ—Ç–∫—É.\n"
        "3. –¶–µ–ª—å - —Å–æ–±—Ä–∞—Ç—å —Ç—Ä–∏ —Å–≤–æ–∏—Ö —Å–∏–º–≤–æ–ª–∞ –≤ —Ä—è–¥ (–ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏, –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ –∏–ª–∏ –¥–∏–∞–≥–æ–Ω–∞–ª–∏).\n"
        "4. –ü–æ–±–µ–∂–¥–∞–µ—Ç —Ç–æ—Ç, –∫—Ç–æ –ø–µ—Ä–≤—ã–º —Å–æ–±–µ—Ä–µ—Ç —Ç—Ä–∏ —Å–∏–º–≤–æ–ª–∞ –≤ —Ä—è–¥.\n"
        "5. –ï—Å–ª–∏ –≤—Å–µ –∫–ª–µ—Ç–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, –Ω–æ –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–±–µ–¥–∏–ª - —ç—Ç–æ –Ω–∏—á—å—è.\n\n"
        "–£–¥–∞—á–∏ –≤ –∏–≥—Ä–µ! üçÄ"
    )
    update.callback_query.edit_message_text(
        rules_text,
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_menu')]])
    )
    return MENU

def show_stats(update: Update, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞."""
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –∑–∞–≥–ª—É—à–∫–∞
    stats_text = (
        "–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        "–ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: 0\n"
        "–ü–æ–±–µ–¥: 0\n"
        "–ü–æ—Ä–∞–∂–µ–Ω–∏–π: 0\n"
        "–ù–∏—á—å–∏—Ö: 0"
    )
    update.callback_query.edit_message_text(
        stats_text,
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_menu')]])
    )
    return MENU

def cancel(update: Update, context):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–ù–æ–≤–∞—è –∏–≥—Ä–∞", callback_data='new_game')],
            [InlineKeyboardButton("–ü—Ä–∞–≤–∏–ª–∞", callback_data='rules')],
            [InlineKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')]
        ])
    )
    return MENU

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            MENU: [CallbackQueryHandler(menu_handler)],
            GAME_MODE: [CallbackQueryHandler(game_mode)],
            GAME_PLAY: [CallbackQueryHandler(handle_move, pattern='^move_')],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    dp.add_handler(conv_handler)
    dp.add_handler(CommandHandler("newgame", handle_create_game))
    dp.add_handler(CommandHandler("join", handle_join_game))

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
	
	# –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∫–æ–¥–∞...

import json
from telegram.error import TelegramError

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
def save_data():
    with open('game_data.json', 'w') as f:
        json.dump({
            'active_games': active_games,
            'player_stats': player_stats,
            'achievements': achievements,
            'daily_tasks': daily_tasks
        }, f)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
def load_data():
    global active_games, player_stats, achievements, daily_tasks
    try:
        with open('game_data.json', 'r') as f:
            data = json.load(f)
            active_games = data.get('active_games', {})
            player_stats = data.get('player_stats', {})
            achievements = data.get('achievements', {})
            daily_tasks = data.get('daily_tasks', {})
    except FileNotFoundError:
        logger.info("Data file not found. Starting with empty data.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
def error_handler(update: Update, context):
    logger.error(f"Update {update} caused error {context.error}")
    try:
        raise context.error
    except TelegramError as e:
        logger.error(f"Telegram Error: {e.message}")
    except Exception as e:
        logger.error(f"Unexpected error: {str(e)}")

# –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def auto_save(context):
    save_data()
    logger.info("Auto-saved game data")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä
def cleanup_games(context):
    current_time = time.time()
    for game_code in list(active_games.keys()):
        if current_time - active_games[game_code].get('last_activity', 0) > 3600:  # 1 —á–∞—Å –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            del active_games[game_code]
    logger.info("Cleaned up inactive games")

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è main
def main():
    load_data()  # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ

    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            MENU: [CallbackQueryHandler(menu_handler)],
            GAME_MODE: [CallbackQueryHandler(game_mode)],
            GAME_PLAY: [
                CallbackQueryHandler(handle_move, pattern='^move_'),
                CallbackQueryHandler(handle_move_with_bot, pattern='^move_bot_')
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    dp.add_handler(conv_handler)
    dp.add_handler(CommandHandler("newgame", handle_create_game))
    dp.add_handler(CommandHandler("join", handle_join_game))

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
    dp.add_error_handler(error_handler)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
    job_queue = updater.job_queue
    job_queue.run_repeating(auto_save, interval=300, first=10)  # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    job_queue.run_daily(cleanup_games, time=datetime.time(hour=3, minute=0))  # –û—á–∏—Å—Ç–∫–∞ –≤ 3:00 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å

    updater.start_polling()
    logger.info("Bot started")
    updater.idle()

if __name__ == '__main__':
    main()

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

def get_leaderboard():
    sorted_players = sorted(player_stats.items(), key=lambda x: x[1]['rating'], reverse=True)
    return sorted_players[:10]  # –¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤

def show_leaderboard(update: Update, context):
    leaderboard = get_leaderboard()
    leaderboard_text = "–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤:\n\n"
    for i, (player_id, stats) in enumerate(leaderboard, 1):
        leaderboard_text += f"{i}. {stats['name']} - {stats['rating']} –æ—á–∫–æ–≤\n"
    update.callback_query.edit_message_text(leaderboard_text)

def help_command(update: Update, context):
    help_text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/newgame - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É\n"
        "/join [–∫–æ–¥] - –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ –ø–æ –∫–æ–¥—É\n"
        "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/leaderboard - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤"
    )
    update.message.reply_text(help_text)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤ main()
dp.add_handler(CommandHandler("help", help_command))
dp.add_handler(CommandHandler("leaderboard", show_leaderboard))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–≥—Ä—ã
def update_game_activity(game_code):
    if game_code in active_games:
        active_games[game_code]['last_activity'] = time.time()

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π handle_move –∏ handle_move_with_bot
def handle_move(update: Update, context):
    # ... (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥)
    update_game_activity(game_code)
    # ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥)

def handle_move_with_bot(update: Update, context):
    # ... (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥)
    update_game_activity(game_code)
    # ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–≥—Ä–æ–∫–∞–º
def send_notification(context: CallbackContext):
    for player_id, stats in player_stats.items():
        if time.time() - stats.get('last_played', 0) > 86400 * 3:  # –ù–µ –∏–≥—Ä–∞–ª 3 –¥–Ω—è
            try:
                context.bot.send_message(player_id, "–î–∞–≤–Ω–æ –Ω–µ –≤–∏–¥–µ–ª–∏—Å—å! –ú–æ–∂–µ—Ç, —Å—ã–≥—Ä–∞–µ–º –ø–∞—Ä—Ç–∏—é –≤ –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏?")
            except TelegramError:
                logger.warning(f"Failed to send notification to user {player_id}")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ main()
job_queue.run_daily(send_notification, time=datetime.time(hour=18, minute=0))  # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 18:00
