import logging
import random
import string
import json
import asyncio
import time
from datetime import datetime, time as datetime_time

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ConversationHandler, ContextTypes
from telegram.ext import filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
TOKEN = '7285079982:AAF7h-dP_WbeHQjOUYr-BvTtR02GJHkBmtQ'

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
active_games = {}
MENU, GAME_PLAY = range(2)

def get_main_keyboard():
    keyboard = [
        [KeyboardButton("–ù–æ–≤–∞—è –∏–≥—Ä–∞"), KeyboardButton("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ")],
        [KeyboardButton("–ü—Ä–∞–≤–∏–ª–∞"), KeyboardButton("–ü–æ–º–æ—â—å")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def create_board_keyboard(board, game_code):
    keyboard = []
    for i in range(0, 9, 3):
        row = []
        for j in range(3):
            cell = board[i + j]
            if cell == ' ':
                callback_data = f"move_{game_code}_{i+j}"
            else:
                callback_data = f"occupied_{game_code}_{i+j}"
            row.append(InlineKeyboardButton(cell if cell != ' ' else '.', callback_data=callback_data))
        keyboard.append(row)
    return InlineKeyboardMarkup(keyboard)

async def send_board(game_code, context):
    game = active_games.get(game_code)
    if not game:
        return

    current_player = game['player1'] if game['current_turn'] == 'X' else game['player2']
    opponent = game['player2'] if game['current_turn'] == 'X' else game['player1']

    board_keyboard = create_board_keyboard(game['board'], game_code)
    
    message = f"–ò–≥—Ä–∞ {game_code}\n"
    message += f"–•–æ–¥ –∏–≥—Ä–æ–∫–∞: {context.bot_data['usernames'].get(current_player, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')} ({game['current_turn']})\n"
    message += f"–û–∂–∏–¥–∞–µ—Ç: {context.bot_data['usernames'].get(opponent, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')} ({'O' if game['current_turn'] == 'X' else 'X'})"

    for player in [game['player1'], game['player2']]:
        try:
            await context.bot.send_message(chat_id=player, text=message, reply_markup=board_keyboard)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É {player}: {e}")

async def handle_move(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    game_code, move = query.data.split('_')[1:]
    game = active_games.get(game_code)
    
    if not game:
        await query.edit_message_text("–≠—Ç–∞ –∏–≥—Ä–∞ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.")
        return MENU

    current_player = game['player1'] if game['current_turn'] == 'X' else game['player2']
    
    if query.from_user.id != current_player:
        await query.answer("–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!", show_alert=True)
        return GAME_PLAY

    move = int(move)
    if game['board'][move] == ' ':
        game['board'][move] = game['current_turn']
        game['current_turn'] = 'O' if game['current_turn'] == 'X' else 'X'
        game['last_activity'] = time.time()
        
        winner = check_winner(game['board'])
        if winner:
            await end_game(game_code, winner, context)
            return MENU
        elif ' ' not in game['board']:
            await end_game(game_code, 'draw', context)
            return MENU
        else:
            await send_board(game_code, context)
            return GAME_PLAY
    else:
        await query.answer("–≠—Ç–∞ –∫–ª–µ—Ç–∫–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞!", show_alert=True)
        return GAME_PLAY

async def end_game(game_code, result, context):
    game = active_games.pop(game_code, None)
    if not game:
        return

    if result == 'draw':
        message = "–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –≤–Ω–∏—á—å—é!"
    else:
        winner = game['player1'] if result == 'X' else game['player2']
        loser = game['player2'] if result == 'X' else game['player1']
        message = f"–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {context.bot_data['usernames'].get(winner, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')} ({result})"

    for player in [game['player1'], game['player2']]:
        try:
            await context.bot.send_message(chat_id=player, text=message)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã –∏–≥—Ä–æ–∫—É {player}: {e}")

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–æ–≤

def check_winner(board):
    winning_combinations = [
        [0, 1, 2], [3, 4, 5], [6, 7, 8],  # –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
        [0, 3, 6], [1, 4, 7], [2, 5, 8],  # –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
        [0, 4, 8], [2, 4, 6]  # –¥–∏–∞–≥–æ–Ω–∞–ª–∏
    ]
    for combo in winning_combinations:
        if board[combo[0]] == board[combo[1]] == board[combo[2]] != ' ':
            return board[combo[0]]
    return None

async def load_data():
    # –ó–¥–µ—Å—å –∫–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    pass

async def save_data():
    # –ó–¥–µ—Å—å –∫–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
    pass

async def auto_save(context: ContextTypes.DEFAULT_TYPE):
    # –ó–¥–µ—Å—å –∫–æ–¥ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    pass

async def cleanup_games(context: ContextTypes.DEFAULT_TYPE):
    # –ó–¥–µ—Å—å –∫–æ–¥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä
    pass
	
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user = update.effective_user
    context.bot_data.setdefault('usernames', {})[user.id] = user.first_name
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É –ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏.",
        reply_markup=get_main_keyboard()
    )
    return MENU

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üÜò –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "/start - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/newgame - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É\n"
        "/join [–∫–æ–¥] - –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ –ø–æ –∫–æ–¥—É\n"
        "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/rules - –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã"
    )
    await update.message.reply_text(help_text, reply_markup=get_main_keyboard())
    return MENU

async def show_rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    rules_text = (
        "–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏:\n\n"
        "1. –ò–≥—Ä–∞ –≤–µ–¥–µ—Ç—Å—è –Ω–∞ –ø–æ–ª–µ 3x3.\n"
        "2. –ò–≥—Ä–æ–∫–∏ —Ö–æ–¥—è—Ç –ø–æ –æ—á–µ—Ä–µ–¥–∏.\n"
        "3. –ü–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫ —Å—Ç–∞–≤–∏—Ç –∫—Ä–µ—Å—Ç–∏–∫–∏, –≤—Ç–æ—Ä–æ–π - –Ω–æ–ª–∏–∫–∏.\n"
        "4. –ü–æ–±–µ–∂–¥–∞–µ—Ç —Ç–æ—Ç, –∫—Ç–æ –ø–µ—Ä–≤—ã–º –≤—ã—Å—Ç—Ä–æ–∏—Ç –≤ —Ä—è–¥ 3 —Å–≤–æ–∏—Ö —Ñ–∏–≥—É—Ä—ã.\n"
        "5. –ï—Å–ª–∏ –≤—Å–µ –∫–ª–µ—Ç–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, –Ω–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –æ–±—ä—è–≤–ª—è–µ—Ç—Å—è –Ω–∏—á—å—è."
    )
    await update.message.reply_text(rules_text, reply_markup=get_main_keyboard())
    return MENU

async def handle_create_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    game_code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))
    active_games[game_code] = {
        'player1': update.effective_user.id,
        'player2': None,
        'board': [' ' for _ in range(9)],
        'current_turn': 'X',
        'last_activity': time.time()
    }
    await update.message.reply_text(f"–ù–æ–≤–∞—è –∏–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞! –ö–æ–¥ –∏–≥—Ä—ã: {game_code}")
    return MENU

async def handle_join_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–¥ –∏–≥—Ä—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /join")
        return MENU
    
    game_code = context.args[0].upper()
    game = active_games.get(game_code)
    
    if not game:
        await update.message.reply_text("–ò–≥—Ä–∞ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return MENU
    
    if game['player2']:
        await update.message.reply_text("–ö —ç—Ç–æ–π –∏–≥—Ä–µ —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –≤—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫.")
        return MENU
    
    game['player2'] = update.effective_user.id
    await update.message.reply_text(f"–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ {game_code}!")
    await start_game(update, context, game_code)
    return GAME_PLAY

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "–ù–æ–≤–∞—è –∏–≥—Ä–∞":
        return await handle_create_game(update, context)
    elif text == "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ":
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–≥—Ä—ã:")
        return MENU
    elif text == "–ü—Ä–∞–≤–∏–ª–∞":
        return await show_rules(update, context)
    elif text == "–ü–æ–º–æ—â—å":
        return await help_command(update, context)
    else:
        await update.message.reply_text("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")
        return MENU

async def start_game(update: Update, context: ContextTypes.DEFAULT_TYPE, game_code=None):
    if not game_code:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω –∫–æ–¥ –∏–≥—Ä—ã.")
        return MENU
    
    game = active_games.get(game_code)
    if not game:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –∏–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return MENU
    
    await send_board(game_code, context)
    return GAME_PLAY

async def handle_move_with_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –≠—Ç–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä—É —Å –±–æ—Ç–æ–º
    pass

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"Exception while handling an update: {context.error}")

async def main() -> None:
    application = Application.builder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("rules", show_rules))
    application.add_handler(CommandHandler("newgame", handle_create_game))
    application.add_handler(CommandHandler("join", handle_join_game))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –∫–Ω–æ–ø–æ–∫)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    application.add_handler(CallbackQueryHandler(start_game, pattern='^start_game_'))
    application.add_handler(CallbackQueryHandler(handle_move, pattern='^move_'))
    application.add_handler(CallbackQueryHandler(handle_move_with_bot, pattern='^move_bot_'))

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
    job_queue = application.job_queue
    job_queue.run_repeating(auto_save, interval=300, first=10)  # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    job_queue.run_daily(cleanup_games, time=datetime_time(hour=3, minute=0))  # –û—á–∏—Å—Ç–∫–∞ –≤ 3:00 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await application.initialize()
    await application.start()
    await application.updater.start_polling()

    logger.info("Bot started")

    # –î–µ—Ä–∂–∏–º –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    stop_signal = asyncio.Future()
    await stop_signal

    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
    await application.stop()
    await application.shutdown()

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        pass  # –ü–æ–∑–≤–æ–ª—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Ctrl+C
    finally:
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
        asyncio.run(save_data())
        logger.info("Bot stopped and data saved")

import json
from pathlib import Path

DATA_FILE = Path("game_data.json")

async def load_data():
    if DATA_FILE.exists():
        with open(DATA_FILE, "r") as f:
            data = json.load(f)
            global active_games
            active_games = {k: v for k, v in data.items() if time.time() - v['last_activity'] < 86400}  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–≥—Ä—ã, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –Ω–µ –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥
    logger.info("Data loaded successfully")

async def save_data():
    with open(DATA_FILE, "w") as f:
        json.dump(active_games, f)
    logger.info("Data saved successfully")

async def auto_save(context: ContextTypes.DEFAULT_TYPE):
    await save_data()
    logger.info("Auto-save completed")

async def cleanup_games(context: ContextTypes.DEFAULT_TYPE):
    global active_games
    current_time = time.time()
    inactive_games = [code for code, game in active_games.items() if current_time - game['last_activity'] > 86400]
    for code in inactive_games:
        del active_games[code]
    logger.info(f"Cleaned up {len(inactive_games)} inactive games")

async def handle_move_with_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    game_code, move = query.data.split('_')[2:]
    game = active_games.get(game_code)
    
    if not game:
        await query.edit_message_text("–≠—Ç–∞ –∏–≥—Ä–∞ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.")
        return MENU

    move = int(move)
    if game['board'][move] == ' ':
        game['board'][move] = 'X'
        game['last_activity'] = time.time()
        
        winner = check_winner(game['board'])
        if winner:
            await end_game(game_code, winner, context)
            return MENU
        elif ' ' not in game['board']:
            await end_game(game_code, 'draw', context)
            return MENU
        
        # –•–æ–¥ –±–æ—Ç–∞
        bot_move = get_bot_move(game['board'])
        game['board'][bot_move] = 'O'
        
        winner = check_winner(game['board'])
        if winner:
            await end_game(game_code, winner, context)
            return MENU
        elif ' ' not in game['board']:
            await end_game(game_code, 'draw', context)
            return MENU
        else:
            await send_board(game_code, context)
            return GAME_PLAY
    else:
        await query.answer("–≠—Ç–∞ –∫–ª–µ—Ç–∫–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞!", show_alert=True)
        return GAME_PLAY

def get_bot_move(board):
    empty_cells = [i for i, cell in enumerate(board) if cell == ' ']
    return random.choice(empty_cells)

async def create_bot_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    game_code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))
    active_games[game_code] = {
        'player1': update.effective_user.id,
        'player2': 'bot',
        'board': [' ' for _ in range(9)],
        'current_turn': 'X',
        'last_activity': time.time()
    }
    await update.message.reply_text(f"–ù–æ–≤–∞—è –∏–≥—Ä–∞ —Å –±–æ—Ç–æ–º —Å–æ–∑–¥–∞–Ω–∞! –ö–æ–¥ –∏–≥—Ä—ã: {game_code}")
    await start_game(update, context, game_code)
    return GAME_PLAY

# –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é handle_message
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "–ù–æ–≤–∞—è –∏–≥—Ä–∞":
        return await handle_create_game(update, context)
    elif text == "–ò–≥—Ä–∞ —Å –±–æ—Ç–æ–º":
        return await create_bot_game(update, context)
    elif text == "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ":
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–≥—Ä—ã:")
        return MENU
    elif text == "–ü—Ä–∞–≤–∏–ª–∞":
        return await show_rules(update, context)
    elif text == "–ü–æ–º–æ—â—å":
        return await help_command(update, context)
    else:
        await update.message.reply_text("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")
        return MENU

# –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é get_main_keyboard
def get_main_keyboard():
    keyboard = [
        [KeyboardButton("–ù–æ–≤–∞—è –∏–≥—Ä–∞"), KeyboardButton("–ò–≥—Ä–∞ —Å –±–æ—Ç–æ–º")],
        [KeyboardButton("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ")],
        [KeyboardButton("–ü—Ä–∞–≤–∏–ª–∞"), KeyboardButton("–ü–æ–º–æ—â—å")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ —Ñ—É–Ω–∫—Ü–∏—é main
application.add_handler(CallbackQueryHandler(handle_move_with_bot, pattern='^move_bot_'))

from collections import defaultdict

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
player_stats = defaultdict(lambda: {"wins": 0, "losses": 0, "draws": 0})

async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    stats = player_stats[user_id]
    total_games = stats["wins"] + stats["losses"] + stats["draws"]
    win_rate = (stats["wins"] / total_games * 100) if total_games > 0 else 0

    stats_text = (
        f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"–í—Å–µ–≥–æ –∏–≥—Ä: {total_games}\n"
        f"–ü–æ–±–µ–¥—ã: {stats['wins']}\n"
        f"–ü–æ—Ä–∞–∂–µ–Ω–∏—è: {stats['losses']}\n"
        f"–ù–∏—á—å–∏: {stats['draws']}\n"
        f"–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: {win_rate:.2f}%"
    )
    await update.message.reply_text(stats_text, reply_markup=get_main_keyboard())
    return MENU

async def show_leaderboard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    sorted_players = sorted(player_stats.items(), key=lambda x: x[1]["wins"], reverse=True)
    leaderboard_text = "üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤:\n\n"
    for i, (player_id, stats) in enumerate(sorted_players[:10], start=1):
        username = context.bot_data['usernames'].get(player_id, f"Player{player_id}")
        leaderboard_text += f"{i}. {username}: {stats['wins']} –ø–æ–±–µ–¥\n"
    await update.message.reply_text(leaderboard_text, reply_markup=get_main_keyboard())
    return MENU

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_keyboard())
    return MENU

async def end_game(game_code, result, context):
    game = active_games.pop(game_code, None)
    if not game:
        return

    if result == 'draw':
        message = "–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –≤–Ω–∏—á—å—é!"
        player_stats[game['player1']]["draws"] += 1
        player_stats[game['player2']]["draws"] += 1
    else:
        winner = game['player1'] if result == 'X' else game['player2']
        loser = game['player2'] if result == 'X' else game['player1']
        message = f"–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {context.bot_data['usernames'].get(winner, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')} ({result})"
        player_stats[winner]["wins"] += 1
        player_stats[loser]["losses"] += 1

    for player in [game['player1'], game['player2']]:
        try:
            await context.bot.send_message(chat_id=player, text=message, reply_markup=get_main_keyboard())
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã –∏–≥—Ä–æ–∫—É {player}: {e}")

async def load_data():
    if DATA_FILE.exists():
        with open(DATA_FILE, "r") as f:
            data = json.load(f)
            global active_games, player_stats
            active_games = {k: v for k, v in data['active_games'].items() if time.time() - v['last_activity'] < 86400}
            player_stats = defaultdict(lambda: {"wins": 0, "losses": 0, "draws": 0}, data['player_stats'])
    logger.info("Data loaded successfully")

async def save_data():
    with open(DATA_FILE, "w") as f:
        json.dump({
            'active_games': active_games,
            'player_stats': dict(player_stats)
        }, f)
    logger.info("Data saved successfully")

def get_main_keyboard():
    keyboard = [
        [KeyboardButton("–ù–æ–≤–∞—è –∏–≥—Ä–∞"), KeyboardButton("–ò–≥—Ä–∞ —Å –±–æ—Ç–æ–º")],
        [KeyboardButton("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ"), KeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton("–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤"), KeyboardButton("–ü—Ä–∞–≤–∏–ª–∞")],
        [KeyboardButton("–ü–æ–º–æ—â—å")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "–ù–æ–≤–∞—è –∏–≥—Ä–∞":
        return await handle_create_game(update, context)
    elif text == "–ò–≥—Ä–∞ —Å –±–æ—Ç–æ–º":
        return await create_bot_game(update, context)
    elif text == "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ":
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–≥—Ä—ã:")
        return MENU
    elif text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        return await show_stats(update, context)
    elif text == "–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤":
        return await show_leaderboard(update, context)
    elif text == "–ü—Ä–∞–≤–∏–ª–∞":
        return await show_rules(update, context)
    elif text == "–ü–æ–º–æ—â—å":
        return await help_command(update, context)
    else:
        await update.message.reply_text("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")
        return MENU

# –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é main
async def main() -> None:
    application = Application.builder().token(TOKEN).build()

    await load_data()  # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("rules", show_rules))
    application.add_handler(CommandHandler("newgame", handle_create_game))
    application.add_handler(CommandHandler("join", handle_join_game))
    application.add_handler(CommandHandler("stats", show_stats))
    application.add_handler(CommandHandler("leaderboard", show_leaderboard))
    application.add_handler(CommandHandler("cancel", cancel))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –∫–Ω–æ–ø–æ–∫)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    application.add_handler(CallbackQueryHandler(start_game, pattern='^start_game_'))
    application.add_handler(CallbackQueryHandler(handle_move, pattern='^move_'))
    application.add_handler(CallbackQueryHandler(handle_move_with_bot, pattern='^move_bot_'))

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
    job_queue = application.job_queue
    job_queue.run_repeating(auto_save, interval=300, first=10)  # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    job_queue.run_daily(cleanup_games, time=datetime_time(hour=3, minute=0))  # –û—á–∏—Å—Ç–∫–∞ –≤ 3:00 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await application.initialize()
    await application.start()
    await application.updater.start_polling()

    logger.info("Bot started")

    # –î–µ—Ä–∂–∏–º –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    stop_signal = asyncio.Future()
    await stop_signal

    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
    await application.stop()
    await application.shutdown()

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        pass  # –ü–æ–∑–≤–æ–ª—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Ctrl+C
    finally:
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
        asyncio.run(save_data())
        logger.info("Bot stopped and data saved")

import logging
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    root = logging.getLogger()
    root.setLevel(logging.INFO)
    
    handler = logging.StreamHandler(sys.stdout)
    handler.setLevel(logging.INFO)
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    handler.setFormatter(formatter)
    root.addHandler(handler)
    
    file_handler = logging.FileHandler('bot.log')
    file_handler.setLevel(logging.INFO)
    file_handler.setFormatter(formatter)
    root.addHandler(file_handler)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
async def check_bot_status(context: ContextTypes.DEFAULT_TYPE):
    try:
        me = await context.bot.get_me()
        logger.info(f"Bot {me.first_name} is running. Username: @{me.username}")
    except Exception as e:
        logger.error(f"Error checking bot status: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
async def send_admin_message(context: ContextTypes.DEFAULT_TYPE, message: str):
    admin_id = YOUR_ADMIN_ID  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID
    try:
        await context.bot.send_message(chat_id=admin_id, text=message)
    except Exception as e:
        logger.error(f"Failed to send message to admin: {e}")

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è error_handler
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"Exception while handling an update: {context.error}")
    tb_list = traceback.format_exception(None, context.error, context.error.__traceback__)
    tb_string = ''.join(tb_list)
    update_str = update.to_dict() if isinstance(update, Update) else str(update)
    message = (
        f"An exception was raised while handling an update\n"
        f"<pre>update = {html.escape(json.dumps(update_str, indent=2, ensure_ascii=False))}"
        "</pre>\n\n"
        f"<pre>{html.escape(tb_string)}</pre>"
    )
    await send_admin_message(context, message)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—á–∏—Å—Ç–∫–∏ "–∑–∞–≤–∏—Å—à–∏—Ö" –∏–≥—Ä
async def check_and_clean_stuck_games(context: ContextTypes.DEFAULT_TYPE):
    current_time = time.time()
    stuck_games = [code for code, game in active_games.items() if current_time - game['last_activity'] > 3600]  # 1 —á–∞—Å
    for code in stuck_games:
        game = active_games.pop(code)
        for player in [game['player1'], game['player2']]:
            if player != 'bot':
                try:
                    await context.bot.send_message(
                        chat_id=player,
                        text=f"–ò–≥—Ä–∞ {code} –±—ã–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."
                    )
                except Exception as e:
                    logger.error(f"Failed to send message about stuck game to player {player}: {e}")
    if stuck_games:
        logger.info(f"Cleaned up {len(stuck_games)} stuck games")

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è main
async def main() -> None:
    setup_logging()
    
    application = Application.builder().token(TOKEN).build()

    await load_data()  # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("rules", show_rules))
    application.add_handler(CommandHandler("newgame", handle_create_game))
    application.add_handler(CommandHandler("join", handle_join_game))
    application.add_handler(CommandHandler("stats", show_stats))
    application.add_handler(CommandHandler("leaderboard", show_leaderboard))
    application.add_handler(CommandHandler("cancel", cancel))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –∫–Ω–æ–ø–æ–∫)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    application.add_handler(CallbackQueryHandler(start_game, pattern='^start_game_'))
    application.add_handler(CallbackQueryHandler(handle_move, pattern='^move_'))
    application.add_handler(CallbackQueryHandler(handle_move_with_bot, pattern='^move_bot_'))

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
    job_queue = application.job_queue
    job_queue.run_repeating(auto_save, interval=300, first=10)  # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    job_queue.run_daily(cleanup_games, time=datetime_time(hour=3, minute=0))  # –û—á–∏—Å—Ç–∫–∞ –≤ 3:00 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
    job_queue.run_repeating(check_bot_status, interval=3600, first=10)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ –∫–∞–∂–¥—ã–π —á–∞—Å
    job_queue.run_repeating(check_and_clean_stuck_games, interval=1800, first=900)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ "–∑–∞–≤–∏—Å—à–∏—Ö" –∏–≥—Ä –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await application.initialize()
    await application.start()
    await application.updater.start_polling()

    logger.info("Bot started")
    await send_admin_message(application, "Bot has been started successfully!")

    # –î–µ—Ä–∂–∏–º –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    stop_signal = asyncio.Future()
    await stop_signal

    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
    await application.stop()
    await application.shutdown()

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.error(f"Unhandled exception: {e}")
        logger.exception("Exception details:")
    finally:
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
        asyncio.run(save_data())
        logger.info("Bot stopped and data saved")

	
	
	