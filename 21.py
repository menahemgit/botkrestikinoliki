import logging
import random
import string
import json
import asyncio
import time

import random
import string

# ANSI escape –∫–æ–¥—ã –¥–ª—è —Ü–≤–µ—Ç–æ–≤
CYAN = '\033[96m'
RESET = '\033[0m'

def generate_game_code():
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –∏–∑ 6 —Å–∏–º–≤–æ–ª–æ–≤ (–±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã)
    characters = string.ascii_uppercase + string.digits
    code = ''.join(random.choice(characters) for _ in range(6))
    return code

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –∏–≥—Ä—ã
game_code = generate_game_code()

# –í—ã–≤–æ–¥ –∫–æ–¥–∞ –∏–≥—Ä—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ü–≤–µ—Ç–∞
print(f"–ö–æ–¥ –∏–≥—Ä—ã: {CYAN}{game_code}{RESET}")

from datetime import datetime, time as datetime_time
from pathlib import Path
from collections import defaultdict
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ConversationHandler, ContextTypes, filters
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from telegram import InlineKeyboardButton, InlineKeyboardMarkup

# –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
def get_persistent_keyboard():
    keyboard = [
        [KeyboardButton("–ù–æ–≤–∞—è –∏–≥—Ä–∞"), KeyboardButton("–ò–≥—Ä–∞ —Å –±–æ—Ç–æ–º")],
        [KeyboardButton("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ"), KeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton("–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤"), KeyboardButton("–ü—Ä–∞–≤–∏–ª–∞")],
        [KeyboardButton("–ü–æ–º–æ—â—å")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, persistent=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    context.bot_data.setdefault('usernames', {})[user.id] = user.first_name
    welcome_message = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É –ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ."
    )
    await update.message.reply_text(welcome_message, reply_markup=get_persistent_keyboard())
    return MENU

async def generate_code_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    game_code = generate_game_code()
    await update.message.reply_text(f"–ö–æ–¥ –∏–≥—Ä—ã: `{game_code}`", parse_mode='MarkdownV2')
    print(f"–ö–æ–¥ –∏–≥—Ä—ã: {CYAN}{game_code}{RESET}")  # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ —Å —Ü–≤–µ—Ç–æ–º

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text
    if text == "–ù–æ–≤–∞—è –∏–≥—Ä–∞":
        return await create_multiplayer_game(update, context)
    elif text == "–ò–≥—Ä–∞ —Å –±–æ—Ç–æ–º":
        return await create_bot_game(update, context)
    elif text == "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ":
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–≥—Ä—ã:", reply_markup=get_persistent_keyboard())
        context.user_data['waiting_for_game_code'] = True
        return MENU
    elif text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        return await show_stats(update, context)
    elif text == "–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤":
        return await show_leaderboard(update, context)
    elif text == "–ü—Ä–∞–≤–∏–ª–∞":
        return await show_rules(update, context)
    elif text == "–ü–æ–º–æ—â—å":
        return await help_command(update, context)
    elif context.user_data.get('waiting_for_game_code'):
        context.user_data['waiting_for_game_code'] = False
        return await join_game(update, context)
    else:
        await update.message.reply_text(
            "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.",
            reply_markup=get_persistent_keyboard()
        )
        return MENU

# –û–±–Ω–æ–≤–∏—Ç–µ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, 
# –¥–æ–±–∞–≤–∏–≤ –ø–∞—Ä–∞–º–µ—Ç—Ä reply_markup=get_persistent_keyboard()
# –ù–∞–ø—Ä–∏–º–µ—Ä:

async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
     # –õ–æ–≥–∏–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
    user_id = update.effective_user.id
    stats = player_stats[user_id]
    total_games = stats["wins"] + stats["losses"] + stats["draws"]
    win_rate = (stats["wins"] / total_games * 100) if total_games > 0 else 0

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é

    stats_text = (
        f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"–í—Å–µ–≥–æ –∏–≥—Ä: {total_games}\n"
        f"–ü–æ–±–µ–¥—ã: {stats['wins']}\n"
        f"–ü–æ—Ä–∞–∂–µ–Ω–∏—è: {stats['losses']}\n"
        f"–ù–∏—á—å–∏: {stats['draws']}\n"
        f"–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: {win_rate:.2f}%"
    )
    await update.message.reply_text(stats_text, reply_markup=get_persistent_keyboard())
    return MENU

# –û–±–Ω–æ–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é main(), –¥–æ–±–∞–≤–∏–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:

async def main() -> None:
    application = Application.builder().token(TOKEN).build()

    await setup_commands(application)
    await load_data()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("rules", show_rules))
    application.add_handler(CommandHandler("newgame", create_multiplayer_game))
    application.add_handler(CommandHandler("botgame", create_bot_game))
    application.add_handler(CommandHandler("join", handle_join_game))
    application.add_handler(CommandHandler("stats", show_stats))
    application.add_handler(CommandHandler("leaderboard", show_leaderboard))
    application.add_handler(CommandHandler("cancel", cancel))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –∫–Ω–æ–ø–æ–∫)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
TOKEN = '7285079982:AAF7h-dP_WbeHQjOUYr-BvTtR02GJHkBmtQ'

# ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –æ—à–∏–±–æ–∫
ADMIN_CHAT_ID = '6592924868'

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
active_games = {}
MENU, GAME_PLAY = range(2)
DATA_FILE = Path("game_data.json")
player_stats = defaultdict(lambda: {"wins": 0, "losses": 0, "draws": 0})

def get_main_keyboard():
    keyboard = [
        [KeyboardButton("–ù–æ–≤–∞—è –∏–≥—Ä–∞"), KeyboardButton("–ò–≥—Ä–∞ —Å –±–æ—Ç–æ–º")],
        [KeyboardButton("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ"), KeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton("–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤"), KeyboardButton("–ü—Ä–∞–≤–∏–ª–∞")],
        [KeyboardButton("–ü–æ–º–æ—â—å")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def create_board_display(board):
    emoji_map = {' ': '‚¨úÔ∏è', 'X': '‚ùå', 'O': '‚≠ïÔ∏è'}
    return '\n'.join([''.join([emoji_map[cell] for cell in board[i:i+3]]) for i in range(0, 9, 3)])

def create_board_keyboard(board, game_code, is_bot_game=False):
    keyboard = []
    for i in range(0, 9, 3):
        row = []
        for j in range(3):
            cell = board[i + j]
            if cell == ' ':
                callback_data = f"move_{'bot_' if is_bot_game else ''}{game_code}_{i+j}"
            else:
                callback_data = f"occupied_{game_code}_{i+j}"
            row.append(InlineKeyboardButton(cell if cell != ' ' else str(i+j+1), callback_data=callback_data))
        keyboard.append(row)
    return InlineKeyboardMarkup(keyboard)

def check_winner(board):
    winning_combinations = [
        [0, 1, 2], [3, 4, 5], [6, 7, 8],  # –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
        [0, 3, 6], [1, 4, 7], [2, 5, 8],  # –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
        [0, 4, 8], [2, 4, 6]  # –¥–∏–∞–≥–æ–Ω–∞–ª–∏
    ]
    for combo in winning_combinations:
        if board[combo[0]] == board[combo[1]] == board[combo[2]] != ' ':
            return board[combo[0]]
    return None

def bot_move(board):
    empty_cells = [i for i, cell in enumerate(board) if cell == ' ']
    return random.choice(empty_cells)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    context.bot_data.setdefault('usernames', {})[user.id] = user.first_name
    welcome_message = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É –ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ."
    )
    await update.message.reply_text(welcome_message, reply_markup=get_main_keyboard())
    return MENU

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üÜò –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "/start - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/newgame - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–Ω—É—é –∏–≥—Ä—É\n"
        "/botgame - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É —Å –±–æ—Ç–æ–º\n"
        "/join [–∫–æ–¥] - –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ –ø–æ –∫–æ–¥—É\n"
        "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/rules - –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã\n"
        "/stats - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        "/leaderboard - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤"
    )
    await update.message.reply_text(help_text, reply_markup=get_main_keyboard())
    return MENU

async def show_rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    rules_text = (
        "–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏:\n\n"
        "1. –ò–≥—Ä–∞ –≤–µ–¥–µ—Ç—Å—è –Ω–∞ –ø–æ–ª–µ 3x3.\n"
        "2. –ò–≥—Ä–æ–∫–∏ —Ö–æ–¥—è—Ç –ø–æ –æ—á–µ—Ä–µ–¥–∏.\n"
        "3. –ü–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫ —Å—Ç–∞–≤–∏—Ç –∫—Ä–µ—Å—Ç–∏–∫–∏, –≤—Ç–æ—Ä–æ–π - –Ω–æ–ª–∏–∫–∏.\n"
        "4. –ü–æ–±–µ–∂–¥–∞–µ—Ç —Ç–æ—Ç, –∫—Ç–æ –ø–µ—Ä–≤—ã–º –≤—ã—Å—Ç—Ä–æ–∏—Ç –≤ —Ä—è–¥ 3 —Å–≤–æ–∏—Ö —Ñ–∏–≥—É—Ä—ã.\n"
        "5. –ï—Å–ª–∏ –≤—Å–µ –∫–ª–µ—Ç–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, –Ω–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –æ–±—ä—è–≤–ª—è–µ—Ç—Å—è –Ω–∏—á—å—è."
    )
    await update.message.reply_text(rules_text, reply_markup=get_main_keyboard())
    return MENU
	
async def create_multiplayer_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    game_code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))
    active_games[game_code] = {
        'player1': update.effective_user.id,
        'player2': None,
        'board': [' ' for _ in range(9)],
        'current_turn': 'X',
        'last_activity': time.time()
    }
    await update.message.reply_text(f"–ù–æ–≤–∞—è –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–Ω–∞—è –∏–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞! –ö–æ–¥ –∏–≥—Ä—ã: {game_code}\n–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–∏–º –∫–æ–¥–æ–º —Å –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–æ–º, —á—Ç–æ–±—ã –æ–Ω –º–æ–≥ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è.")
    return MENU

async def create_bot_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    game_code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))
    active_games[game_code] = {
        'player1': update.effective_user.id,
        'player2': 'bot',
        'board': [' ' for _ in range(9)],
        'current_turn': 'X',
        'last_activity': time.time()
    }
    await update.message.reply_text(f"–ù–æ–≤–∞—è –∏–≥—Ä–∞ —Å –±–æ—Ç–æ–º —Å–æ–∑–¥–∞–Ω–∞! –ö–æ–¥ –∏–≥—Ä—ã: {game_code}")
    await send_board(game_code, context)
    return GAME_PLAY
    
async def handle_join_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–≥—Ä—ã:")
    context.user_data['waiting_for_game_code'] = True
    return MENU    

async def join_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    game_code = update.message.text.upper()
    game = active_games.get(game_code)
    
    if not game:
        await update.message.reply_text("–ò–≥—Ä–∞ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return MENU
    
    if game['player2']:
        await update.message.reply_text("–ö —ç—Ç–æ–π –∏–≥—Ä–µ —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –≤—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫.")
        return MENU
    
    game['player2'] = update.effective_user.id
    await update.message.reply_text(f"–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ {game_code}!")
    await send_board(game_code, context)
    return GAME_PLAY

async def handle_move(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    game_code, move = query.data.split('_')[1:]
    game = active_games.get(game_code)
    
    if not game:
        await query.edit_message_text("–≠—Ç–∞ –∏–≥—Ä–∞ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.")
        return MENU

    current_player = game['player1'] if game['current_turn'] == 'X' else game['player2']
    
    if query.from_user.id != current_player:
        await query.answer("–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!", show_alert=True)
        return GAME_PLAY

    move = int(move)
    if game['board'][move] == ' ':
        game['board'][move] = game['current_turn']
        game['current_turn'] = 'O' if game['current_turn'] == 'X' else 'X'
        game['last_activity'] = time.time()
        
        winner = check_winner(game['board'])
        if winner:
            await end_game(game_code, winner, context)
            return MENU
        elif ' ' not in game['board']:
            await end_game(game_code, 'draw', context)
            return MENU
        else:
            await send_board(game_code, context)
            return GAME_PLAY
    else:
        await query.answer("–≠—Ç–∞ –∫–ª–µ—Ç–∫–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞!", show_alert=True)
        return GAME_PLAY

async def handle_move_with_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    game_code, move = query.data.split('_')[2:]
    game = active_games.get(game_code)
    
    if not game:
        await query.edit_message_text("–≠—Ç–∞ –∏–≥—Ä–∞ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.")
        return MENU

    move = int(move)
    if game['board'][move] == ' ':
        game['board'][move] = 'X'
        game['last_activity'] = time.time()
        
        winner = check_winner(game['board'])
        if winner:
            await end_game(game_code, winner, context)
            return MENU
        elif ' ' not in game['board']:
            await end_game(game_code, 'draw', context)
            return MENU
        
        # –•–æ–¥ –±–æ—Ç–∞
        bot_move_index = bot_move(game['board'])
        game['board'][bot_move_index] = 'O'
        
        winner = check_winner(game['board'])
        if winner:
            await end_game(game_code, winner, context)
            return MENU
        elif ' ' not in game['board']:
            await end_game(game_code, 'draw', context)
            return MENU
        else:
            await send_board(game_code, context)
            return GAME_PLAY
    else:
        await query.answer("–≠—Ç–∞ –∫–ª–µ—Ç–∫–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞!", show_alert=True)
        return GAME_PLAY

async def send_board(game_code, context):
    game = active_games[game_code]
    board = game['board']
    current_player = game['player1'] if game['current_turn'] == 'X' else game['player2']
    is_bot_game = game['player2'] == 'bot'
    
    board_display = create_board_display(board)
    keyboard = create_board_keyboard(board, game_code, is_bot_game)
    
    message = f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã:\n\n{board_display}\n\n–•–æ–¥ –∏–≥—Ä–æ–∫–∞: {'X' if game['current_turn'] == 'X' else 'O'}"
    
    for player in [game['player1'], game['player2']]:
        if player != 'bot':
            try:
                await context.bot.send_message(
                    chat_id=player,
                    text=message,
                    reply_markup=keyboard
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É {player}: {e}")
                
async def send_game_result(context, chat_id, result, winner=None):
    if result == 'draw':
        message = "–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –≤–Ω–∏—á—å—é! ü§ù"
    else:
        winner_name = context.bot_data['usernames'].get(winner, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–≥—Ä–æ–∫')
        message = f"–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner_name} ({result}) üèÜ"
    
    keyboard = [
        [InlineKeyboardButton("–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="play_again")],
        [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await context.bot.send_message(chat_id=chat_id, text=message, reply_markup=reply_markup)                

async def end_game(game_code, result, context):
    game = active_games.pop(game_code, None)
    if not game:
        return

    if result == 'draw':
        await update_player_stats(game['player1'], 'draw')
        await update_player_stats(game['player2'], 'draw')
        winner = None
    else:
        winner = game['player1'] if result == 'X' else game['player2']
        loser = game['player2'] if result == 'X' else game['player1']
        await update_player_stats(winner, 'win')
        await update_player_stats(loser, 'loss')

    for player in [game['player1'], game['player2']]:
        if player != 'bot':
            try:
                await send_game_result(context, player, result, winner)
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã –∏–≥—Ä–æ–∫—É {player}: {e}")

    await save_data()
	
async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    stats = player_stats[user_id]
    total_games = stats["wins"] + stats["losses"] + stats["draws"]
    win_rate = (stats["wins"] / total_games * 100) if total_games > 0 else 0

    stats_text = (
        f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"–í—Å–µ–≥–æ –∏–≥—Ä: {total_games}\n"
        f"–ü–æ–±–µ–¥—ã: {stats['wins']}\n"
        f"–ü–æ—Ä–∞–∂–µ–Ω–∏—è: {stats['losses']}\n"
        f"–ù–∏—á—å–∏: {stats['draws']}\n"
        f"–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: {win_rate:.2f}%"
    )
    await update.message.reply_text(stats_text, reply_markup=get_main_keyboard())
    return MENU

async def show_leaderboard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    sorted_players = sorted(player_stats.items(), key=lambda x: x[1]["wins"], reverse=True)
    leaderboard_text = "üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤:\n\n"
    for i, (player_id, stats) in enumerate(sorted_players[:10], start=1):
        username = context.bot_data['usernames'].get(player_id, f"Player{player_id}")
        leaderboard_text += f"{i}. {username}: {stats['wins']} –ø–æ–±–µ–¥\n"
    await update.message.reply_text(leaderboard_text, reply_markup=get_main_keyboard())
    return MENU

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_keyboard())
    return MENU

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "–ù–æ–≤–∞—è –∏–≥—Ä–∞":
        return await create_multiplayer_game(update, context)
    elif text == "–ò–≥—Ä–∞ —Å –±–æ—Ç–æ–º":
        return await create_bot_game(update, context)
    elif text == "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ":
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–≥—Ä—ã:")
        context.user_data['waiting_for_game_code'] = True
        return MENU
    elif text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        return await show_stats(update, context)
    elif text == "–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤":
        return await show_leaderboard(update, context)
    elif text == "–ü—Ä–∞–≤–∏–ª–∞":
        return await show_rules(update, context)
    elif text == "–ü–æ–º–æ—â—å":
        return await help_command(update, context)
    elif context.user_data.get('waiting_for_game_code'):
        context.user_data['waiting_for_game_code'] = False
        return await join_game(update, context)
    else:
        await update.message.reply_text(
            "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.",
            reply_markup=get_main_keyboard()
        )
        return MENU

async def save_data():
    with open(DATA_FILE, "w") as f:
        json.dump({
            'active_games': active_games,
            'player_stats': dict(player_stats)
        }, f)
    logger.info("Data saved successfully")

async def load_data():
    global active_games, player_stats
    if DATA_FILE.exists():
        with open(DATA_FILE, "r") as f:
            data = json.load(f)
            active_games = {k: v for k, v in data.get('active_games', {}).items() if time.time() - v['last_activity'] < 86400}
            player_stats = defaultdict(lambda: {"wins": 0, "losses": 0, "draws": 0}, data.get('player_stats', {}))
    logger.info("Data loaded successfully")

async def auto_save(context: ContextTypes.DEFAULT_TYPE):
    await save_data()
    logger.info("Auto-save completed")

async def cleanup_games(context: ContextTypes.DEFAULT_TYPE):
    global active_games
    current_time = time.time()
    inactive_games = [code for code, game in active_games.items() if current_time - game['last_activity'] > 86400]
    for code in inactive_games:
        del active_games[code]
    logger.info(f"Cleaned up {len(inactive_games)} inactive games")

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"Exception while handling an update: {context.error}")
    await context.bot.send_message(
        chat_id=ADMIN_CHAT_ID,
        text=f"An error occurred: {context.error}"
    )
    
async def update_player_stats(player, result):
    if player != 'bot':
        if result == 'win':
            player_stats[player]["wins"] += 1
        elif result == 'loss':
            player_stats[player]["losses"] += 1
        else:  # draw
            player_stats[player]["draws"] += 1   
            
async def post_game_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "play_again":
        # –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É
        await start_game(update, context)
    elif query.data == "main_menu":
        # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await show_main_menu(update, context)  
        
                 
    
    
async def main() -> None:
    application = Application.builder().token(TOKEN).build()

    await load_data()  # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("rules", show_rules))
    application.add_handler(CommandHandler("newgame", create_multiplayer_game))
    application.add_handler(CommandHandler("botgame", create_bot_game))
    application.add_handler(CommandHandler("join", handle_join_game))
    application.add_handler(CommandHandler("stats", show_stats))
    application.add_handler(CommandHandler("leaderboard", show_leaderboard))
    application.add_handler(CommandHandler("cancel", cancel))
    application.add_handler(CallbackQueryHandler(post_game_button_handler, pattern="^(play_again|main_menu)$"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –∫–Ω–æ–ø–æ–∫ –∏ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –∏–≥—Ä—ã)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    application.add_handler(CallbackQueryHandler(handle_move, pattern='^move_[^bot]'))
    application.add_handler(CallbackQueryHandler(handle_move_with_bot, pattern='^move_bot'))

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
    job_queue = application.job_queue
    job_queue.run_repeating(auto_save, interval=300, first=10)  # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    job_queue.run_daily(cleanup_games, time=datetime_time(hour=3, minute=0))  # –û—á–∏—Å—Ç–∫–∞ –≤ 3:00 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await application.initialize()
    await application.start()
    await application.updater.start_polling()

    logger.info("Bot started")

    # –î–µ—Ä–∂–∏–º –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    stop_signal = asyncio.Future()
    await stop_signal

    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
    await application.stop()
    await application.shutdown()

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        pass
    finally:
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
        asyncio.run(save_data())
        logger.info("Bot stopped and data saved")